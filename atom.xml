<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>然而，然而</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thea-r.github.io/"/>
  <updated>2018-07-01T09:53:07.000Z</updated>
  <id>http://thea-r.github.io/</id>
  
  <author>
    <name>Thea-R</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018暑假集训记录（一）</title>
    <link href="http://thea-r.github.io/2018/06/30/2018%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://thea-r.github.io/2018/06/30/2018暑假集训记录（一）/</id>
    <published>2018-06-30T08:44:14.000Z</published>
    <updated>2018-07-01T09:53:07.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　暑假集训个人日常（好熟悉的开场🙊）。  </p>
<a id="more"></a>  
<p>　　  </p>
<hr>
<p>　　  </p>
<h1 id="day1-06-30"><a href="#day1-06-30" class="headerlink" title="day1 06.30"></a>day1 06.30</h1><ol>
<li><h3 id="Contest：The-2015-ACM-ICPC-ChangChun-Regional-Contest"><a href="#Contest：The-2015-ACM-ICPC-ChangChun-Regional-Contest" class="headerlink" title="Contest：The 2015 ACM-ICPC ChangChun Regional Contest"></a><a href="http://icpc.njust.edu.cn/Contest/6259/" target="_blank" rel="external">Contest：The 2015 ACM-ICPC ChangChun Regional Contest</a></h3><p>[🎈]    <del><strong>A    Too Rich（贪心）</strong></del></p>
<p>[　]    B    Count a * b</p>
<p>[　]    C    Play a game</p>
<p>[　]    D    Pipes selection</p>
<p>[　]    E    Rebuild</p>
<p>[🎈]    F    Almost Sorted Array（递推）</p>
<p>[🎈]    G    Dancing Stars on Me（计算几何凸包）</p>
<p>[🎈]    <strong><del>H    Partial Tree（完全背包）</del></strong></p>
<p>[　]    I    Chess Puzzle</p>
<p>[🎈]    J    Chip Factory（暴力／01Trie树）</p>
<p>[　]    K    Maximum Spanning Forest</p>
<p>[🎈]    L    House Building（简单计算）</p>
<p>[　]    M    Security Corporation</p>
</li>
<li><h3 id="Chaos"><a href="#Chaos" class="headerlink" title="Chaos"></a>Chaos</h3><p>   G读完题目不看样例于是就理解错了… J读完题目算算复杂度不敢莽于是隔壁就A了… F边界不好好处理于是1A就没了… 去年day4的A题我写了个恶心的优先队列然后今天写了个优美的线段树还在沾沾自喜然后发现其实只要扫一遍预处理就over了… 滚粗👋。    </p>
</li>
<li><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><ul>
<li><p>【A】数据范围太大不能背包，但是这题比普通背包更巧妙的条件在于，除了$50$和$500$，其余硬币的价值都是前一个的整数倍，也就是说可以用若干个硬币$i$代替一个硬币$i+1$，所以我们在枚举的时候如果考虑多取一个$50/500$凑成$100/1000$，那就可以保证贪心的正确性。贪心策略是，用尽可能多的小面值硬币，前提是小面值硬币可以凑出当前需要的钱数，所以从大面值的开始决策。  </p>
<div><div class="fold_hider"><div class="close hider_title">「查看代码」</div></div><div class="fold">
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, p, ans, c[maxn], val[maxn]=&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">500</span>, <span class="number">1000</span>, <span class="number">2000</span>&#125;, sum[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> tot, <span class="keyword">int</span> id, <span class="keyword">int</span> cnt)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(tot&lt;<span class="number">0</span>)	<span class="keyword">return</span> ;</div><div class="line">	<span class="keyword">if</span>(id==<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(tot==<span class="number">0</span>)	ans=max(ans, cnt);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> ret=max(tot-sum[id<span class="number">-1</span>], <span class="number">0</span>);</div><div class="line">	<span class="keyword">int</span> tmp=ret/val[id]+(ret%val[id]!=<span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(tmp&lt;=c[id])	Dfs(tot-tmp*val[id], id<span class="number">-1</span>, cnt+tmp);</div><div class="line">	<span class="keyword">if</span>(tmp+<span class="number">1</span>&lt;=c[id])  Dfs(tot-(tmp+<span class="number">1</span>)*val[id], id<span class="number">-1</span>, cnt+tmp+<span class="number">1</span>);</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">	<span class="keyword">while</span>(T--)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</div><div class="line">			sum[i]=c[i]*val[i]+sum[i<span class="number">-1</span>];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ans=<span class="number">-1</span>;</div><div class="line">		Dfs(p, <span class="number">10</span>, <span class="number">0</span>);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div>  
</li>
<li><p>【H】因为$n$个点的树总度数确定为$2n-2$，一个很直接的想法是做完全背包，但最简单的背包不能保证连通。我们可以考虑先把每个点分配$1$度，提前保证连通，剩下的$n-2$度再进行完全背包，因为每次分配相当于把一个点的从$1$度变成了$k$度，所以增加的贡献应该是$a[1]-a[k]$（注意$f$数组不能初始化为-1，因为这里有可能为负数= =），最终答案为$f[n-2]+n*a[1]$。  </p>
  <div><div class="fold_hider"><div class="close hider_title">「查看代码」</div></div><div class="fold">
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2500</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, n, m, a[maxn], f[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">	<span class="keyword">while</span>(T--)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line"></div><div class="line">		<span class="built_in">memset</span>(f, <span class="number">0x8f</span>, <span class="keyword">sizeof</span> f);</div><div class="line">		f[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;n; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>; j&lt;=n<span class="number">-2</span>; j++)</div><div class="line">				f[j]=max(f[j], f[j-i+<span class="number">1</span>]+a[i]-a[<span class="number">1</span>]);</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[n<span class="number">-2</span>]+n*a[<span class="number">1</span>]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

</div></div>  
</li>
<li><p>【J】暴力水，Trie做法后补…  </p>
</li>
</ul>
</li>
</ol>
<h1 id="day2-07-01"><a href="#day2-07-01" class="headerlink" title="day2 07.01"></a>day2 07.01</h1><ol>
<li><h3 id="Contest：The-2015-ACM-ICPC-Shenyang-Regional-Contest"><a href="#Contest：The-2015-ACM-ICPC-Shenyang-Regional-Contest" class="headerlink" title="Contest：The 2015 ACM-ICPC Shenyang Regional Contest"></a><a href="http://icpc.njust.edu.cn/Contest/6263/" target="_blank" rel="external">Contest：The 2015 ACM-ICPC Shenyang Regional Contest</a></h3><p>​</p>
</li>
<li><h3 id="Chaos-1"><a href="#Chaos-1" class="headerlink" title="Chaos"></a>Chaos</h3><p> ​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　暑假集训个人日常（好熟悉的开场🙊）。  &lt;/p&gt;
    
    </summary>
    
      <category term="ACM训练记录" scheme="http://thea-r.github.io/categories/ACM%E8%AE%AD%E7%BB%83%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="record" scheme="http://thea-r.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>HDU6086 Rikka with String</title>
    <link href="http://thea-r.github.io/2017/08/09/HDU6086-Rikka-with-String/"/>
    <id>http://thea-r.github.io/2017/08/09/HDU6086-Rikka-with-String/</id>
    <published>2017-08-09T01:58:52.000Z</published>
    <updated>2018-07-01T09:53:11.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2017 Multi-University Training Contest 5  </p>
<p>　　题意：给定n个01模式串，求一个长度为2L、覆盖全部模式串的反对称(对于任意x，每一个对称位置都不同)主串的个数。  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4057" target="_blank" rel="external">- 原题链接</a><br><a id="more"></a>  </p>
<p>　　对于每个模式串，它在主串中可能有这样一些情况：  </p>
<ul>
<li>出现在左串，此时展示出来的是原串  </li>
<li>出现在右串，与此相对应的，左串里一定有它的反对称串  </li>
</ul>
<p>　　那我们把每个串的原串和反对称串同时插入AC自动机中，只需要处理长度为L的串。还有一种情况是模式串横跨左右两串，此时需要特殊处理哪些点可以作为串终点。  </p>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1024</span>+<span class="number">10</span>, DEF=<span class="number">0x8f8f8f8f</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, rt, tot, val[maxn];</div><div class="line"><span class="keyword">bool</span> f[<span class="number">2</span>][maxn][maxn];</div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> nxt[<span class="number">4</span>], fail, st;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></div><div class="line">	</span>&#123;</div><div class="line">		fail=st=<span class="number">0</span>;</div><div class="line">		<span class="built_in">memset</span>(nxt, <span class="number">0</span>, <span class="keyword">sizeof</span> nxt);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">&#125;tr[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getch</span><span class="params">(<span class="keyword">char</span> c)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(c==<span class="string">'A'</span>)	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(c==<span class="string">'T'</span>)	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(c==<span class="string">'G'</span>)	<span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> k, <span class="keyword">char</span> *ch)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, len=<span class="built_in">strlen</span>(ch), cur; i&lt;len; i++)</div><div class="line">	&#123;</div><div class="line">		cur=getch(ch[i]);</div><div class="line">		<span class="keyword">if</span>(!tr[rt].nxt[cur])</div><div class="line">		&#123;</div><div class="line">			tr[++tot].Init();</div><div class="line">			tr[rt].nxt[cur]=tot;</div><div class="line">		&#125;</div><div class="line">		rt=tr[rt].nxt[cur];</div><div class="line">	&#125;</div><div class="line">	tr[rt].st|=(<span class="number">1</span>&lt;&lt;k);</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> rt)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">	q.push(rt);</div><div class="line">	<span class="keyword">while</span>(!q.empty())</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> now=q.front(), p=<span class="number">0</span>;</div><div class="line">		q.pop();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(!tr[now].nxt[i])	tr[now].nxt[i]=tr[tr[now].fail].nxt[i];</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				p=tr[now].nxt[i];</div><div class="line">				q.push(p);</div><div class="line">				<span class="keyword">if</span>(now)	tr[p].fail=tr[tr[now].fail].nxt[i];</div><div class="line">				tr[p].st|=tr[tr[p].fail].st;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Cal</span><span class="params">(<span class="keyword">int</span> st)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span>(st&amp;(<span class="number">1</span>&lt;&lt;i))	cnt+=val[i];</div><div class="line">	<span class="keyword">return</span> cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Work</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">int</span> lim=<span class="number">1</span>&lt;&lt;n, u=<span class="number">0</span>, ans=DEF;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</div><div class="line">	&#123;</div><div class="line">		u^=<span class="number">1</span>;</div><div class="line">		<span class="built_in">memset</span>(f[u], <span class="number">0</span>, <span class="keyword">sizeof</span> f[u]);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=tot; j++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;lim; k++)</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">0</span>; h&lt;<span class="number">4</span>; h++)</div><div class="line">					f[u][tr[j].nxt[h]][k|tr[tr[j].nxt[h]].st]|=f[u^<span class="number">1</span>][j][k];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=tot; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;lim; j++) <span class="keyword">if</span>(f[u][i][j])</div><div class="line">			ans=max(ans, Cal(j));</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n,  &amp;m)!=EOF)</div><div class="line">	&#123;</div><div class="line">		rt=<span class="number">0</span>, tot=<span class="number">0</span>;</div><div class="line">		tr[rt].Init();</div><div class="line">		</div><div class="line">		<span class="keyword">char</span> s[maxn];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s, &amp;val[i]);</div><div class="line">			Insert(rt, i, s);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		Build(rt);</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> ans=Work();</div><div class="line">		ans&lt;<span class="number">0</span> ? <span class="built_in">printf</span>(<span class="string">"No Rabbit after 2012!\n"</span>) : <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2017 Multi-University Training Contest 5  &lt;/p&gt;
&lt;p&gt;　　题意：给定n个01模式串，求一个长度为2L、覆盖全部模式串的反对称(对于任意x，每一个对称位置都不同)主串的个数。  &lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4057&quot;&gt;- 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="http://thea-r.github.io/tags/DP/"/>
    
      <category term="AC自动机" scheme="http://thea-r.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="2017多校" scheme="http://thea-r.github.io/tags/2017%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>HDU4057 Rescue the Rabbit</title>
    <link href="http://thea-r.github.io/2017/08/08/HDU4057-Rescue-the-Rabbit/"/>
    <id>http://thea-r.github.io/2017/08/08/HDU4057-Rescue-the-Rabbit/</id>
    <published>2017-08-08T12:00:47.000Z</published>
    <updated>2018-07-01T09:53:26.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2011 ACM/ICPC 大连赛区现场赛  </p>
<p>　　题意：给定n个模式串及其权值，在主串中可覆盖且每个串只计算一次，求一个长度为L的主串的最大权值和。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4057" target="_blank" rel="external">- 原题链接</a><br><a id="more"></a>  </p>
<p>　　最开始直接DP求权值和，攻击时某些地方姿势有问题，一直wa= =。后来看网上的报告，用f[i][j][k]表示长度为i目前在节点j且覆盖状态为k的可行性，最后计算所有可行方案的权值和取max。</p>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1024</span>+<span class="number">10</span>, DEF=<span class="number">0x8f8f8f8f</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, rt, tot, val[maxn];</div><div class="line"><span class="keyword">bool</span> f[<span class="number">2</span>][maxn][maxn];</div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> nxt[<span class="number">4</span>], fail, st;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></div><div class="line">	</span>&#123;</div><div class="line">		fail=st=<span class="number">0</span>;</div><div class="line">		<span class="built_in">memset</span>(nxt, <span class="number">0</span>, <span class="keyword">sizeof</span> nxt);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">&#125;tr[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getch</span><span class="params">(<span class="keyword">char</span> c)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(c==<span class="string">'A'</span>)	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(c==<span class="string">'T'</span>)	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(c==<span class="string">'G'</span>)	<span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> k, <span class="keyword">char</span> *ch)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, len=<span class="built_in">strlen</span>(ch), cur; i&lt;len; i++)</div><div class="line">	&#123;</div><div class="line">		cur=getch(ch[i]);</div><div class="line">		<span class="keyword">if</span>(!tr[rt].nxt[cur])</div><div class="line">		&#123;</div><div class="line">			tr[++tot].Init();</div><div class="line">			tr[rt].nxt[cur]=tot;</div><div class="line">		&#125;</div><div class="line">		rt=tr[rt].nxt[cur];</div><div class="line">	&#125;</div><div class="line">	tr[rt].st|=(<span class="number">1</span>&lt;&lt;k);</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> rt)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">	q.push(rt);</div><div class="line">	<span class="keyword">while</span>(!q.empty())</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> now=q.front(), p=<span class="number">0</span>;</div><div class="line">		q.pop();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(!tr[now].nxt[i])	tr[now].nxt[i]=tr[tr[now].fail].nxt[i];</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				p=tr[now].nxt[i];</div><div class="line">				q.push(p);</div><div class="line">				<span class="keyword">if</span>(now)	tr[p].fail=tr[tr[now].fail].nxt[i];</div><div class="line">				tr[p].st|=tr[tr[p].fail].st;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Cal</span><span class="params">(<span class="keyword">int</span> st)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span>(st&amp;(<span class="number">1</span>&lt;&lt;i))	cnt+=val[i];</div><div class="line">	<span class="keyword">return</span> cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Work</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">int</span> lim=<span class="number">1</span>&lt;&lt;n, u=<span class="number">0</span>, ans=DEF;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</div><div class="line">	&#123;</div><div class="line">		u^=<span class="number">1</span>;</div><div class="line">		<span class="built_in">memset</span>(f[u], <span class="number">0</span>, <span class="keyword">sizeof</span> f[u]);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=tot; j++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;lim; k++)</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">0</span>; h&lt;<span class="number">4</span>; h++)</div><div class="line">					f[u][tr[j].nxt[h]][k|tr[tr[j].nxt[h]].st]|=f[u^<span class="number">1</span>][j][k];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=tot; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;lim; j++) <span class="keyword">if</span>(f[u][i][j])</div><div class="line">			ans=max(ans, Cal(j));</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n,  &amp;m)!=EOF)</div><div class="line">	&#123;</div><div class="line">		rt=<span class="number">0</span>, tot=<span class="number">0</span>;</div><div class="line">		tr[rt].Init();</div><div class="line">		</div><div class="line">		<span class="keyword">char</span> s[maxn];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s, &amp;val[i]);</div><div class="line">			Insert(rt, i, s);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		Build(rt);</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> ans=Work();</div><div class="line">		ans&lt;<span class="number">0</span> ? <span class="built_in">printf</span>(<span class="string">"No Rabbit after 2012!\n"</span>) : <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2011 ACM/ICPC 大连赛区现场赛  &lt;/p&gt;
&lt;p&gt;　　题意：给定n个模式串及其权值，在主串中可覆盖且每个串只计算一次，求一个长度为L的主串的最大权值和。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4057&quot;&gt;- 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="http://thea-r.github.io/tags/DP/"/>
    
      <category term="2011大连" scheme="http://thea-r.github.io/tags/2011%E5%A4%A7%E8%BF%9E/"/>
    
      <category term="AC自动机" scheme="http://thea-r.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>HDU3709 Balanced Number</title>
    <link href="http://thea-r.github.io/2017/08/08/HDU3709-Balanced-Number/"/>
    <id>http://thea-r.github.io/2017/08/08/HDU3709-Balanced-Number/</id>
    <published>2017-08-08T12:00:33.000Z</published>
    <updated>2018-07-01T09:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2010 ACM/ICPC 成都赛区现场赛  </p>
<p>　　题意：若选定一个数的第i位作为支点，将数分为左右两部分，令第j个位置的价值为d[j]*abs(j-i)，若左右两边的价值和相等，则该数为平衡数。对于每个询问，输出该区间内平衡数的个数。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3709" target="_blank" rel="external">- 原题链接</a><br><a id="more"></a>  </p>
<p>　　常规的数位DP题，最开始wa在直接return f[pos][st]这个地方，因为limit的取值对同一组pos和st是有影响的，可以直接在f中加上limit这一维，也可以根据limit取值特殊判断。</p>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20</span>+<span class="number">5</span>, S=<span class="number">1500</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lint;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, n, upnum[N];</div><div class="line">lint x, y, f[N][S];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(lint num)</span></div><div class="line"></span>&#123;</div><div class="line">	n=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(num)</div><div class="line">	&#123;</div><div class="line">		upnum[++n]=num%<span class="number">10</span>;</div><div class="line">		num/=<span class="number">10l</span>l;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">lint <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> st, <span class="keyword">int</span> pt, <span class="keyword">bool</span> limit)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(pos==<span class="number">0</span>)	<span class="keyword">return</span> f[pos][st]=(st==<span class="number">0</span>);</div><div class="line">	<span class="keyword">if</span>(!limit &amp;&amp; f[pos][st]!=<span class="number">-1</span>)	<span class="keyword">return</span> f[pos][st];</div><div class="line"></div><div class="line">	lint ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> up= limit ? upnum[pos] : <span class="number">9</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=up; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(pos&gt;=pt)	ans+=DP(pos<span class="number">-1</span>, st+i*(pos-pt), pt, (limit &amp;&amp; i==upnum[pos]));</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(st-i*(pt-pos)&gt;=<span class="number">0</span>)	ans+=DP(pos<span class="number">-1</span>, st-i*(pt-pos), pt, (limit &amp;&amp; i==upnum[pos]));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(!limit)	f[pos][st]=ans;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">lint <span class="title">Work</span><span class="params">(lint num)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">10</span>)	<span class="keyword">return</span> num+<span class="number">1</span>;</div><div class="line"></div><div class="line">	Init(num);</div><div class="line"></div><div class="line">	lint ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</div><div class="line">		ans+=DP(n, <span class="number">0</span>, i, <span class="literal">true</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans-n+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">	<span class="keyword">int</span> tt=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(T--)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;x, &amp;y);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Work(y)-Work(x<span class="number">-1</span>));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2010 ACM/ICPC 成都赛区现场赛  &lt;/p&gt;
&lt;p&gt;　　题意：若选定一个数的第i位作为支点，将数分为左右两部分，令第j个位置的价值为d[j]*abs(j-i)，若左右两边的价值和相等，则该数为平衡数。对于每个询问，输出该区间内平衡数的个数。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3709&quot;&gt;- 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="http://thea-r.github.io/tags/DP/"/>
    
      <category term="2010成都" scheme="http://thea-r.github.io/tags/2010%E6%88%90%E9%83%BD/"/>
    
      <category term="数位DP" scheme="http://thea-r.github.io/tags/%E6%95%B0%E4%BD%8DDP/"/>
    
  </entry>
  
  <entry>
    <title>HDU4427 Math Magic</title>
    <link href="http://thea-r.github.io/2017/08/08/HDU4427-Math-Magic/"/>
    <id>http://thea-r.github.io/2017/08/08/HDU4427-Math-Magic/</id>
    <published>2017-08-08T11:58:36.000Z</published>
    <updated>2018-07-01T09:53:22.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2012 ACM/ICPC 长春赛区现场赛  </p>
<p>　　题意：求选定k个数，使得这k个数的和为n、最小公倍数为m的方案数。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4427" target="_blank" rel="external"> - 原题链接</a><br><a id="more"></a>  </p>
<p>　　初步想法是用f[i][j][k]表示i个数的和为j且最小公倍数为k的方案数，但时间复杂度过大，考虑如何优化，这里就要orz我队的DP大佬天神了。  </p>
<p>　　首先我们有一个很显然的数学结论，如果若干数的最小公倍数是k，则它们每个数都是k的约数。打表不难发现，1000以内的数约数个数是很少的，所以我们修改f[i][j][k]的定义为i个数的和为j且最小公倍数是第k个约数的方案数，就能有效地降低时间复杂度。  </p>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">10</span>, N=<span class="number">35</span>, mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, p, f[<span class="number">100</span>+<span class="number">10</span>][maxn][N];</div><div class="line"><span class="keyword">int</span> lcm[maxn][maxn], val[N], pos[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;maxn; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;maxn; j++)</div><div class="line">			lcm[i][j]=i*j/<span class="number">__</span>gcd(i, j);</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k)!=EOF)</div><div class="line">	&#123;</div><div class="line">		p=<span class="number">0</span>;</div><div class="line">		<span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="keyword">sizeof</span> val);</div><div class="line">		<span class="built_in">memset</span>(pos, <span class="number">0</span>, <span class="keyword">sizeof</span> pos);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)	<span class="keyword">if</span>(m%i==<span class="number">0</span>) val[++p]=i, pos[i]=p;</div><div class="line">		</div><div class="line">		<span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">		f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>; j&lt;=n; j++)</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=p; x++)</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>; y&lt;=p &amp;&amp; j+val[y]&lt;=n; y++)</div><div class="line">					&#123;</div><div class="line">						<span class="keyword">int</span> <span class="number">_l</span>cm=lcm[val[x]][val[y]];</div><div class="line">						<span class="keyword">if</span>(<span class="number">_l</span>cm&lt;=m &amp;&amp; pos[<span class="number">_l</span>cm])	f[i][j+val[y]][pos[<span class="number">_l</span>cm]]=(f[i][j+val[y]][pos[<span class="number">_l</span>cm]]+f[i<span class="number">-1</span>][j][x])%mod;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[k][n][pos[m]]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2012 ACM/ICPC 长春赛区现场赛  &lt;/p&gt;
&lt;p&gt;　　题意：求选定k个数，使得这k个数的和为n、最小公倍数为m的方案数。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4427&quot;&gt; - 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="http://thea-r.github.io/tags/DP/"/>
    
      <category term="2012长春" scheme="http://thea-r.github.io/tags/2012%E9%95%BF%E6%98%A5/"/>
    
  </entry>
  
  <entry>
    <title>HDU4796 Winter&#39;s Coming</title>
    <link href="http://thea-r.github.io/2017/08/08/HDU4796-Winter-s-Coming/"/>
    <id>http://thea-r.github.io/2017/08/08/HDU4796-Winter-s-Coming/</id>
    <published>2017-08-08T11:55:46.000Z</published>
    <updated>2018-07-01T09:53:15.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2013 ACM/ICPC 长沙赛区现场赛  </p>
<p>　　题意：n*m的地图，绕过障碍点建墙，使得W在墙的左边，L在强的右边，求最小花费。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4796" target="_blank" rel="external"> - 原题链接</a>   </p>
<a id="more"></a>  
<p>　　很明显的插头DP，问题在于如何解决W、L格子的左右问题呢？其实画画图不难得到规律，对于每一个W、L格子，若轮廓线左边的插头数为偶数，则在墙的左边，否则在墙的右边（每穿一次墙增加插头数）。  </p>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20</span>+<span class="number">5</span>, <span class="number">_</span>hash=<span class="number">10007</span>, maxn=<span class="number">1000000</span>+<span class="number">10</span>, INF=<span class="number">0x7f7f7f7f</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lint;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, code[N], ch[N], mmp[N][N];</div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"><span class="keyword">struct</span> hashmap</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> cur, fir[<span class="number">_</span>hash], nxt[maxn], f[maxn];</div><div class="line">	lint st[maxn];</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></div><div class="line">	</span>&#123;</div><div class="line">		cur=<span class="number">0</span>;</div><div class="line">		<span class="built_in">memset</span>(fir, <span class="number">0</span>, <span class="keyword">sizeof</span> fir);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(lint s, <span class="keyword">int</span> ans)</span></div><div class="line">	</span>&#123;</div><div class="line">		<span class="keyword">int</span> u=s%<span class="number">_</span>hash;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=fir[u]; i; i=nxt[i])	<span class="keyword">if</span>(st[i]==s)</div><div class="line">		&#123;</div><div class="line">			f[i]=min(f[i], ans);</div><div class="line">			<span class="keyword">return</span> ;</div><div class="line">		&#125;</div><div class="line">		nxt[++cur]=fir[u], fir[u]=cur, st[cur]=s, f[cur]=ans;</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">&#125;p[<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Read</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(mmp, <span class="number">-1</span>, <span class="keyword">sizeof</span> mmp);</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s+<span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(s[j]==<span class="string">'#'</span>)	mmp[i][j]=<span class="number">-1</span>;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s[j]==<span class="string">'W'</span>)	mmp[i][j]=<span class="number">-2</span>;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(s[j]==<span class="string">'L'</span>)	mmp[i][j]=<span class="number">-3</span>;</div><div class="line">			<span class="keyword">else</span> mmp[i][j]=s[j]-<span class="string">'0'</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decode</span><span class="params">(lint st)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=m; i&gt;=<span class="number">0</span>; i--)</div><div class="line">	&#123;</div><div class="line">		code[i]=st&amp;<span class="number">7</span>;</div><div class="line">		st&gt;&gt;=<span class="number">3</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">lint <span class="title">Encode</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	lint st=<span class="number">0</span>;</div><div class="line">	<span class="built_in">memset</span>(ch, <span class="number">-1</span>, <span class="keyword">sizeof</span> ch);</div><div class="line">	ch[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, cnt=<span class="number">0</span>; i&lt;=m; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(ch[code[i]]==<span class="number">-1</span>)	ch[code[i]]=++cnt;</div><div class="line">		code[i]=ch[code[i]];</div><div class="line">		st&lt;&lt;=<span class="number">3</span>;</div><div class="line">		st|=code[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> st;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=m; i; i--)	code[i]=code[i<span class="number">-1</span>];</div><div class="line">	code[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DP_blank</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> u)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">int</span> val=mmp[i][j], left, up, t, cnt;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=p[u].cur; k++)</div><div class="line">	&#123;</div><div class="line">		Decode(p[u].st[k]);</div><div class="line"></div><div class="line">		left=code[j<span class="number">-1</span>], up=code[j];</div><div class="line">		<span class="keyword">if</span>(left &amp;&amp; up)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">//left==up时合并会形成环</span></div><div class="line">			<span class="keyword">if</span>(left!=up)</div><div class="line">			&#123;</div><div class="line">				code[j<span class="number">-1</span>]=code[j]=<span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">0</span>; h&lt;=m; h++)	<span class="keyword">if</span>(code[h]==up)	code[h]=left;	<span class="comment">//合并两条不同的线，改变右插头编号</span></div><div class="line">				<span class="keyword">if</span>(j==m)	Shift();</div><div class="line">				p[u^<span class="number">1</span>].push(Encode(), p[u].f[k]+val);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(left || up)</div><div class="line">		&#123;</div><div class="line">			t=(left ? left : up);</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(i==n)<span class="comment">//最后一行</span></div><div class="line">			&#123;</div><div class="line">				cnt=<span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">0</span>; h&lt;j<span class="number">-1</span>; h++) <span class="keyword">if</span>(code[h])	++cnt;</div><div class="line">				<span class="keyword">if</span>(!cnt)</div><div class="line">				&#123;</div><div class="line">					code[j<span class="number">-1</span>]=t, code[j]=<span class="number">0</span>;</div><div class="line">					<span class="keyword">if</span>(j==m)	Shift();</div><div class="line">					p[u^<span class="number">1</span>].push(Encode(), p[u].f[k]+val);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(mmp[i+<span class="number">1</span>][j]&gt;=<span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				code[j<span class="number">-1</span>]=t, code[j]=<span class="number">0</span>;</div><div class="line">				<span class="keyword">if</span>(j==m)	Shift();</div><div class="line">				p[u^<span class="number">1</span>].push(Encode(), p[u].f[k]+val);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(mmp[i][j+<span class="number">1</span>]&gt;=<span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				code[j<span class="number">-1</span>]=<span class="number">0</span>, code[j]=t;</div><div class="line">				<span class="keyword">if</span>(j==m)	Shift();</div><div class="line">				p[u^<span class="number">1</span>].push(Encode(), p[u].f[k]+val);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			code[j<span class="number">-1</span>]=code[j]=<span class="number">0</span>;</div><div class="line">			<span class="keyword">if</span>(j==m)	Shift();</div><div class="line">			p[u^<span class="number">1</span>].push(Encode(), p[u].f[k]);</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(i==n)</div><div class="line">			&#123;</div><div class="line">				cnt=<span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">0</span>; h&lt;j<span class="number">-1</span>; h++) <span class="keyword">if</span>(code[h])	++cnt;</div><div class="line">				<span class="keyword">if</span>(cnt==<span class="number">0</span> &amp;&amp; mmp[i][j+<span class="number">1</span>]&gt;=<span class="number">0</span>)</div><div class="line">				&#123;</div><div class="line">					code[j<span class="number">-1</span>]=code[j]=<span class="number">13</span>;</div><div class="line">					<span class="keyword">if</span>(j==m)	Shift();</div><div class="line">					p[u^<span class="number">1</span>].push(Encode(), p[u].f[k]+val);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(mmp[i][j+<span class="number">1</span>]&gt;=<span class="number">0</span> &amp;&amp; mmp[i+<span class="number">1</span>][j]&gt;=<span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				code[j<span class="number">-1</span>]=code[j]=<span class="number">13</span>;</div><div class="line">				<span class="keyword">if</span>(j==m)	Shift();</div><div class="line">				p[u^<span class="number">1</span>].push(Encode(), p[u].f[k]+val);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DP_block</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> u)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>, cnt; k&lt;=p[u].cur; k++)</div><div class="line">	&#123;</div><div class="line">		Decode(p[u].st[k]);</div><div class="line">		<span class="keyword">if</span>(code[j<span class="number">-1</span>] || code[j])	<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">		cnt=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">0</span>; h&lt;j<span class="number">-1</span>; h++)	<span class="keyword">if</span>(code[h])	++cnt;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(mmp[i][j]==<span class="number">-2</span> &amp;&amp; (cnt&amp;<span class="number">1</span>))	<span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">if</span>(mmp[i][j]==<span class="number">-3</span> &amp;&amp; !(cnt&amp;<span class="number">1</span>))	<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">		code[j<span class="number">-1</span>]=code[j]=<span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(j==m)	Shift();</div><div class="line">		p[u^<span class="number">1</span>].push(Encode(), p[u].f[k]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Work</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">int</span> u=<span class="number">0</span>, ans=INF;</div><div class="line">	</div><div class="line">	p[u].clear();	</div><div class="line">	<span class="built_in">memset</span>(code, <span class="number">0</span>, <span class="keyword">sizeof</span> code);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) <span class="keyword">if</span>(mmp[<span class="number">1</span>][i]&gt;=<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		code[i]=<span class="number">1</span>;</div><div class="line">		p[u].push(Encode(), <span class="number">0</span>);</div><div class="line">		code[i]=<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</div><div class="line">		&#123;</div><div class="line">			p[u^<span class="number">1</span>].clear();</div><div class="line">			<span class="keyword">if</span>(mmp[i][j]&gt;=<span class="number">0</span>)	DP_blank(i, j, u);</div><div class="line">			<span class="keyword">else</span> DP_block(i, j, u);</div><div class="line">			u^=<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, cnt=<span class="number">0</span>; i&lt;=p[u].cur; i++)</div><div class="line">	&#123;</div><div class="line">		Decode(p[u].st[i]);</div><div class="line">		cnt=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)	<span class="keyword">if</span>(code[j])	++cnt;</div><div class="line">		<span class="keyword">if</span>(cnt==<span class="number">1</span>)	ans=min(ans, p[u].f[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> (ans==INF) ? <span class="number">-1</span> : ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF)</div><div class="line">	&#123;</div><div class="line">		Read();</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Work());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2013 ACM/ICPC 长沙赛区现场赛  &lt;/p&gt;
&lt;p&gt;　　题意：n*m的地图，绕过障碍点建墙，使得W在墙的左边，L在强的右边，求最小花费。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4796&quot;&gt; - 原题链接&lt;/a&gt;   &lt;/p&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="http://thea-r.github.io/tags/DP/"/>
    
      <category term="2013长沙" scheme="http://thea-r.github.io/tags/2013%E9%95%BF%E6%B2%99/"/>
    
      <category term="插头DP" scheme="http://thea-r.github.io/tags/%E6%8F%92%E5%A4%B4DP/"/>
    
  </entry>
  
  <entry>
    <title>CF833B The Bakery</title>
    <link href="http://thea-r.github.io/2017/08/08/CF833B-The-Bakery/"/>
    <id>http://thea-r.github.io/2017/08/08/CF833B-The-Bakery/</id>
    <published>2017-08-08T01:59:55.000Z</published>
    <updated>2018-07-01T09:53:40.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　题意：把n个数分成k个区间，每个区间的价值为区间内不同数字的个数，问价值和最大为多少。<a href="http://codeforces.com/problemset/problem/833/B" target="_blank" rel="external"> - 原题链接</a>   </p>
<a id="more"></a>  
<p>　　神奇的线段树… 先碰到多校那场dirt ratio再来做的这道DP，原来这已经是个常（不）规（会）套路了😕。  </p>
<p>　　首先，我们用f[i][j]表示前j个数分成i个区间的最大价值和，则有转移方程：  </p>
<script type="math/tex; mode=display">
f[i][j]=max(f[i-1][x]+value[x+1, j])</script><p>　　显然，如果用暴力方法转移，复杂度为O(kn^2)，所以这里我们利用线段树来维护value。  </p>
<p>　　用辅助数组pos[a[j]]表示a[j]最后一次出现的位置，pre[j]表示a[j]上一次出现位置的下一位。在前i-1个区间已经求出的情况下，我们考虑第i层，假设当前枚举到a[j]，如果从pre[j]到j这段区间任选一个起点x，则[x, j]这段区间都只会有一个a[j]。我们用数组p[y]表示以p[y]为左端点的区间的不同数的个数，那么a[j]的贡献就是令p[pre[j]~j]区间整体+1。若将数组p[y]初始为f[i-1][y-1]，则p[y]最终表示的就是f[i-1][y-1]+value[y, j]，转移时只需要查询p[1~j]的最大值，复杂度优化到O(nklogn)。  </p>
<p><br></p>
<hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">#include&lt;iostream&gt;</div><div class="line">#include&lt;cstring&gt;</div><div class="line">#include&lt;cstdlib&gt;</div><div class="line">#include&lt;cstdio&gt;</div><div class="line">#include&lt;cmath&gt;</div><div class="line">#include&lt;algorithm&gt;</div><div class="line">#define kl (k&lt;&lt;1)</div><div class="line">#define kr ((k&lt;&lt;1)+1)</div><div class="line">#define mid ((l+r)&gt;&gt;1)</div><div class="line">using namespace std;</div><div class="line">const int maxn=35000+10, N=50+10;</div><div class="line"></div><div class="line">int n, k, a[maxn], f[N][maxn];</div><div class="line">int pre[maxn], pos[maxn];</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	int ret, flag;</div><div class="line">&#125;tr[maxn&lt;&lt;2];</div><div class="line"></div><div class="line">void Push_down(int k)</div><div class="line">&#123;</div><div class="line">	tr[kl].ret+=tr[k].flag, tr[kl].flag+=tr[k].flag;</div><div class="line">	tr[kr].ret+=tr[k].flag, tr[kr].flag+=tr[k].flag;</div><div class="line">	tr[k].flag=0;</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Push_up(int k)</div><div class="line">&#123;</div><div class="line">	tr[k].ret=max(tr[kl].ret, tr[kr].ret);</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Build(int x, int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">	tr[k].flag=0;</div><div class="line">	if(l==r)</div><div class="line">	&#123;</div><div class="line">		tr[k].ret=f[x][l-1];	//注意是l-1</div><div class="line">		return ;</div><div class="line">	&#125;</div><div class="line">	Build(x, kl, l, mid);</div><div class="line">	Build(x, kr, mid+1, r);</div><div class="line">	Push_up(k);</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Update(int ll, int rr, int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">	if(rr&lt; l || r &lt;ll)	return ;</div><div class="line">	if(ll&lt;=l &amp;&amp; r&lt;=rr)</div><div class="line">	&#123;</div><div class="line">		tr[k].ret++, tr[k].flag++;</div><div class="line">		return ;</div><div class="line">	&#125;</div><div class="line">	Push_down(k);</div><div class="line">	Update(ll, rr, kl, l, mid);</div><div class="line">	Update(ll, rr, kr, mid+1, r);</div><div class="line">	Push_up(k);</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int Query(int ll, int rr, int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">	if(rr&lt; l || r &lt;ll)	return 0;</div><div class="line">	if(ll&lt;=l &amp;&amp; r&lt;=rr)	return tr[k].ret;</div><div class="line">	int tl=Query(ll, rr, kl, l, mid), tr=Query(ll, rr, kr, mid+1, r);</div><div class="line">	Push_up(k);</div><div class="line">	return max(tl, tr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	while(scanf("%d%d", &amp;n, &amp;k)!=EOF)</div><div class="line">	&#123;</div><div class="line">		memset(pre, 0, sizeof pre);</div><div class="line">		memset(pos, 0, sizeof pos);</div><div class="line">		for(int i=1; i&lt;=n; i++)</div><div class="line">		&#123;</div><div class="line">			scanf("%d", &amp;a[i]);</div><div class="line">			pre[i]=pos[a[i]]+1;</div><div class="line">			pos[a[i]]=i;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		for(int i=1; i&lt;=k; i++)</div><div class="line">		&#123;</div><div class="line">			Build(i-1);</div><div class="line">			for(int j=1; j&lt;=n; j++)</div><div class="line">			&#123;</div><div class="line">				Update(pre[j], j);</div><div class="line">				f[i][j]=Query(1, j);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		printf("%d\n", f[k][n]);</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　题意：把n个数分成k个区间，每个区间的价值为区间内不同数字的个数，问价值和最大为多少。&lt;a href=&quot;http://codeforces.com/problemset/problem/833/B&quot;&gt; - 原题链接&lt;/a&gt;   &lt;/p&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="CF" scheme="http://thea-r.github.io/tags/CF/"/>
    
      <category term="DP" scheme="http://thea-r.github.io/tags/DP/"/>
    
      <category term="线段树" scheme="http://thea-r.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CF825F String Compression</title>
    <link href="http://thea-r.github.io/2017/08/08/CF825F-String-Compression/"/>
    <id>http://thea-r.github.io/2017/08/08/CF825F-String-Compression/</id>
    <published>2017-08-08T01:59:32.000Z</published>
    <updated>2018-07-01T09:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　题意：把一个字符串压缩成CiSi格式（例：hhhhhhh压缩为7h），问压缩后最短长度是多少。<a href="http://codeforces.com/problemset/problem/825/F" target="_blank" rel="external"> - 原题链接</a>   </p>
<a id="more"></a>  
<p>　　DP思路很显然，我们使用f[i]表示压缩字符串前i位的最短长度，辅助数组g[i][j]表示压缩s[i, j]的最短长度。  </p>
<script type="math/tex; mode=display">
g[i][j]=
\begin{cases}
{1+(j-i+1)} & \text {没有循环节}\\
{c[循环节个数]+循环节长度} & \text {有循环节}\\
\end{cases}\\
f[i]=min(f[i], f[j]+g[j+1][i])</script><p>　　这道题最大的收获是学到关于sprintf的用法，将数字i写进足够大的char数组buf中，返回buf的长度：</p>
<script type="math/tex; mode=display">
c[i]=sprintf(buf, "\%d", i);</script><p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">8000</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, nx[maxn], c[maxn], f[maxn], g[maxn][maxn];</div><div class="line"><span class="keyword">char</span> s[maxn], buf[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> *ch, <span class="keyword">int</span> len)</span></div><div class="line"></span>&#123;</div><div class="line">	nx[<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>, j=<span class="number">0</span>; i&lt;=len; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span>(j &amp;&amp; ch[i]!=ch[j+<span class="number">1</span>])	j=nx[j];</div><div class="line">		<span class="keyword">if</span>(ch[i]==ch[j+<span class="number">1</span>])	++j;</div><div class="line">		nx[i]=j;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s+<span class="number">1</span>)!=EOF)</div><div class="line">	&#123;</div><div class="line">		n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</div><div class="line"></div><div class="line">		<span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">		&#123;</div><div class="line">			c[i]=<span class="built_in">sprintf</span>(buf, <span class="string">"%d"</span>, i);</div><div class="line">			f[i]=i+<span class="number">1</span>;	<span class="comment">//每个字符串T都能压缩为1T</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">		&#123;</div><div class="line">			KMP(s+i<span class="number">-1</span>, n-i+<span class="number">1</span>);	<span class="comment">//传进去的是s+i-1，保证函数中合法字符串从下标1开始计数</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n-i+<span class="number">1</span>; j++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">int</span> len=j-nx[j];</div><div class="line">				<span class="keyword">if</span>(j%len==<span class="number">0</span>)	g[i][i+j<span class="number">-1</span>]=c[j/len]+len;	<span class="comment">//循环次数+循环节长度</span></div><div class="line">				<span class="keyword">else</span> g[i][i+j<span class="number">-1</span>]=<span class="number">1</span>+j;	<span class="comment">//不循环</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)</div><div class="line">				f[i]=min(f[i], f[j]+g[j+<span class="number">1</span>][i]);</div><div class="line">		</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[n]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　题意：把一个字符串压缩成CiSi格式（例：hhhhhhh压缩为7h），问压缩后最短长度是多少。&lt;a href=&quot;http://codeforces.com/problemset/problem/825/F&quot;&gt; - 原题链接&lt;/a&gt;   &lt;/p&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="CF" scheme="http://thea-r.github.io/tags/CF/"/>
    
      <category term="KMP" scheme="http://thea-r.github.io/tags/KMP/"/>
    
      <category term="DP" scheme="http://thea-r.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>HDU6024 Innumerable Ancestors</title>
    <link href="http://thea-r.github.io/2017/06/25/HDU6024-Innumerable-Ancestors/"/>
    <id>http://thea-r.github.io/2017/06/25/HDU6024-Innumerable-Ancestors/</id>
    <published>2017-06-25T13:24:20.000Z</published>
    <updated>2018-07-01T09:53:52.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2017中国大学生程序设计竞赛 - 女生专场  </p>
<p>　　题意：给定一棵树，有m次询问，每次询问给出点集X和点集Y，在X中找到一点u，在Y中找到一点v，使得dep(lca(u, v))最大。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6024" target="_blank" rel="external"> - 原题链接</a>   </p>
<a id="more"></a>  
<p>　　队友提供的思路，并未严格证明：对于每次询问，将点集Y中的点按dfs序排序，枚举点集X中的点u，二分点集Y找到和点u的dfs序最近的点v，求dep(lca(u, v))。  </p>
<p>　　因为case数不超过5，且保证每个case的∑k≤100000，时间复杂度并无压力。  </p>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">400000</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, tot, rmq[maxn], P[maxn], F[maxn];</div><div class="line"><span class="keyword">int</span> cur, fir[maxn], nxt[maxn], ver[maxn];</div><div class="line"><span class="keyword">int</span> xk, yk, x[maxn], y[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">struct</span> ST</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> mm[maxn], dp[maxn][<span class="number">20</span>];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></div><div class="line">    </span>&#123;</div><div class="line">        mm[<span class="number">0</span>]=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">        &#123;</div><div class="line">            mm[i]=((i&amp;(i<span class="number">-1</span>))==<span class="number">0</span>) ? mm[i<span class="number">-1</span>]+<span class="number">1</span> : mm[i<span class="number">-1</span>];</div><div class="line">            dp[i][<span class="number">0</span>]=i;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=mm[n]; j++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n; i++)</div><div class="line">                dp[i][j]=rmq[dp[i][j<span class="number">-1</span>]] &lt; rmq[dp[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]] ? dp[i][j<span class="number">-1</span>] : dp[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></div><div class="line">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a&gt;b) swap(a, b);</div><div class="line">        <span class="keyword">int</span> k=mm[b-a+<span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> rmq[dp[a][k]] &lt;= rmq[dp[b-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]] ? dp[a][k] : dp[b-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k];</div><div class="line">    &#125;</div><div class="line">&#125;st;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></div><div class="line"></span>&#123;</div><div class="line">    ver[++cur]=v, nxt[cur]=fir[u], fir[u]=cur;</div><div class="line">    ver[++cur]=u, nxt[cur]=fir[v], fir[v]=cur;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="keyword">return</span> rmq[st.query(P[u], P[v])];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">return</span> P[a]&lt;P[b];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Work</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>, cnt, u;</div><div class="line">	</div><div class="line">	sort(y, y+yk, cmp);</div><div class="line">    </div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;xk; i++)</div><div class="line">    &#123;</div><div class="line">		u=x[i];</div><div class="line">		cnt=lower_bound(y, y+yk, u, cmp)-y;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(cnt&lt;yk) ans=max(ans, query(x[i], y[cnt]));</div><div class="line">        <span class="keyword">if</span>(cnt&gt;<span class="number">0</span>)   ans=max(ans, query(x[i], y[cnt<span class="number">-1</span>]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span></div><div class="line"></span>&#123;</div><div class="line">    vis[u]=<span class="literal">true</span>;</div><div class="line">    F[++tot]=u;</div><div class="line">    rmq[tot]=d;</div><div class="line">    P[u]=tot;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=fir[u], v; i ; i=nxt[i])</div><div class="line">        <span class="keyword">if</span>(!vis[v=ver[i]])</div><div class="line">        &#123;</div><div class="line">            Dfs(v, d+<span class="number">1</span>);</div><div class="line">            F[++tot]=u;</div><div class="line">            rmq[tot]=d;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)!=EOF)</div><div class="line">    &#123;</div><div class="line">        cur=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(fir, <span class="number">0</span>, <span class="keyword">sizeof</span> fir);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, u, v; i&lt;n; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">            Add(u, v);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">        <span class="built_in">memset</span>(P, <span class="number">0</span>, <span class="keyword">sizeof</span> P);</div><div class="line">        <span class="built_in">memset</span>(F, <span class="number">0</span>, <span class="keyword">sizeof</span> F);</div><div class="line">        <span class="built_in">memset</span>(rmq, <span class="number">0</span>, <span class="keyword">sizeof</span> rmq);</div><div class="line">        tot=<span class="number">0</span>;</div><div class="line">        Dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">        st.init(<span class="number">2</span>*n<span class="number">-1</span>);</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;xk);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;xk; j++)	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x[j]);</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;yk);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;yk; j++)	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y[j]);</div><div class="line"></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Work()+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2017中国大学生程序设计竞赛 - 女生专场  &lt;/p&gt;
&lt;p&gt;　　题意：给定一棵树，有m次询问，每次询问给出点集X和点集Y，在X中找到一点u，在Y中找到一点v，使得dep(lca(u, v))最大。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6024&quot;&gt; - 原题链接&lt;/a&gt;   &lt;/p&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="HDU" scheme="http://thea-r.github.io/tags/HDU/"/>
    
      <category term="2017女生赛" scheme="http://thea-r.github.io/tags/2017%E5%A5%B3%E7%94%9F%E8%B5%9B/"/>
    
      <category term="LCA" scheme="http://thea-r.github.io/tags/LCA/"/>
    
      <category term="二分" scheme="http://thea-r.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>2017暑假集训记录（一）</title>
    <link href="http://thea-r.github.io/2017/06/25/2017%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://thea-r.github.io/2017/06/25/2017暑假集训记录（一）/</id>
    <published>2017-06-25T11:05:33.000Z</published>
    <updated>2018-07-01T09:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　暑假集训个人日常（阶段一）。  </p>
<a id="more"></a>  
<p>　　  </p>
<hr>
<p>　　  </p>
<h1 id="day1-06-24"><a href="#day1-06-24" class="headerlink" title="day1 06.24"></a>day1 06.24</h1><ol>
<li><h3 id="TeamTraining：2013-Multi-University-Training-Contest-9-—-rank2"><a href="#TeamTraining：2013-Multi-University-Training-Contest-9-—-rank2" class="headerlink" title="TeamTraining：2013 Multi-University Training Contest 9 — rank2"></a><a href="http://icpc.njust.edu.cn/Contest/1097/" target="_blank" rel="external">TeamTraining：2013 Multi-University Training Contest 9 — rank2</a></h3><p><del>A    Arc of Dream（矩阵快速幂）</del><br>B    Boke and Tsukkomi（带花树）<br><del><a href="https://thea-r.github.io/2017/06/24/HDU4688-Cut-the-Cake/">C    Cut the Cake（计算几何 + DP）</a></del><br><del><a href="https://thea-r.github.io/2017/06/24/HDU4689-Derangement/">D    Derangement（DP）</a></del><br><del>E    EBCDIC（模拟）</del><br>F    Front compression（后缀数组）<br>G    Great Sequence（？？？）<br>H    Huge String（DFS）<br>I    Important Sisters（支配树）<br>J    Jumping Frog（线性递推）</p>
</li>
<li><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>   大佬队友天神的DP真的是强，怒拿D题一血。Messy迅速推出A题矩阵，只是具体实现的时候有些小bug于是狂wa不止，这个故事告诉我们，不管什么时候，该膜就得膜啊。然后我去敲E题大模拟，眼睛都要爆炸了，还是有两个地方没匹配上wa了一次，所以这种sb题submit之前还是得检查检查的啊= = 比较遗憾的是F的后缀数组模版题没人能写，三个人的专题覆盖还是不够。  </p>
</li>
<li><h3 id="Chaos"><a href="#Chaos" class="headerlink" title="Chaos"></a>Chaos</h3><p>   一年没有写博客，重新熟悉了一波hexo的各种操作然后大把时间就过去了… 下午理解了好久D题的DP，晚上又搞了好久C题的计算几何+DP，果然我的DP姿势还是太弱了… 这场比赛的难度啊，不知道什么时候才补得完了…（嗯，反向毒奶一口）  </p>
</li>
<li><h3 id="ToDoList"><a href="#ToDoList" class="headerlink" title="ToDoList"></a>ToDoList</h3><p> 。    DP训练  </p>
<p> 。    学习后缀数组，整理模版  </p>
<p> ​</p>
</li>
</ol>
<h1 id="day2-06-25"><a href="#day2-06-25" class="headerlink" title="day2 06.25"></a>day2 06.25</h1><ol>
<li><h3 id="TeamTraining：2017中国大学生程序设计竞赛-女生专场-—-rank4"><a href="#TeamTraining：2017中国大学生程序设计竞赛-女生专场-—-rank4" class="headerlink" title="TeamTraining：2017中国大学生程序设计竞赛 - 女生专场 — rank4"></a><a href="http://icpc.njust.edu.cn/Contest/1096/" target="_blank" rel="external">TeamTraining：2017中国大学生程序设计竞赛 - 女生专场 — rank4</a></h3><p><del>A    Automatic Judge（模拟）</del><br><del>B    Building Shops（DP）</del><br>C    Coprime Sequence（数学）<br><del>D    Deleting Edges（最短路计数）</del><br>E    Easy Summation（数学）<br>F    Forgiveness（？？？）<br>G    Graph Theory（。。。）<br>H    Happy Necklace（矩阵快速幂）<br><del><a href="https://thea-r.github.io/2017/06/25/HDU6024-Innumerable-Ancestors/">I    Innumerable Ancestors（LCA + 二分）</a></del><br>J    Judicious Strategy（博弈）</p>
</li>
<li><h3 id="Summarize-1"><a href="#Summarize-1" class="headerlink" title="Summarize"></a>Summarize</h3><p>   开场就上去敲了一发A题签到1A，然后队友就在我题目都没看过的时候过掉了E、C、G… 看了一下B题是个简单DP也不知道为什么没人开，而且赛后发现我的DP比标程还少一维hhhhhhh。天神和Messy在推H矩阵的时候我在旁边无所事事，只能痛苦地读新题来打发时间🙃 后来就进入了大佬口述我敲代码的环节… 结果D题脑残wa了好几发狂爆罚时，I题对着模版调了半天还是没写出来，太弱了。本来一度挂在rank1，然后罚时爆炸+后半程开不出题不断往下掉，感觉真是很不爽。可能是集训前几天，感觉三个人还没调整到正确的代码状态，脑残错误有点多，考虑后面做做手速训练。  </p>
</li>
<li><h3 id="Chaos-1"><a href="#Chaos-1" class="headerlink" title="Chaos"></a>Chaos</h3><p>   一整个白天都在和lca做斗争… 从跑不出样例到tle到wa到re到再次跑不出样例… 鬼知道我经历了什么🌚 找Claris大佬(%%%)要了F题的标程，等我搞懂就写一波题解带节奏hhh🤓 然后整理了这篇record，还是把所有东西都记下来比较让人踏实并且有动力。  </p>
<p> 　　话说不知不觉就开始进入了代码手的角色，虽然压力略大，但这种只用动手不用到脑的事情还是很让人开心并且很燃的🙊 不能拖队友后腿辜负信任，所以更要提高自己的代码能力，整理好各种模版很重要。坐等今晚CF，不会猝死吧。  </p>
</li>
<li><h3 id="ToDoList-1"><a href="#ToDoList-1" class="headerlink" title="ToDoList"></a>ToDoList</h3><p>。    学习lca，整理模版  </p>
</li>
<li><h3 id="CF-420-div-2"><a href="#CF-420-div-2" class="headerlink" title="CF # 420 div.2"></a><a href="http://codeforces.com/contest/821" target="_blank" rel="external">CF # 420 div.2</a></h3><p> <del>A    Okabe and Future Gadget Laboratory    x4117</del><br> <del>B    Okabe and Banana Trees    x3026</del><br> <del>C    Okabe and Boxes     x2167</del>（补题解）<br> <del>D    Okabe and City     x330</del>（补题解）<br> <del>E    Okabe and El Psy Kongroo     x477</del>(补题解)</p>
<p> 　　这场手速还行，结果神tm的又unrated，打的为数不多的几场比赛几乎都各种莫名其妙问题unrated，论我为什么不爱打CF🤷不过还是切不动后两题，继续修炼吧少年。  </p>
<p> ​</p>
</li>
</ol>
<h1 id="day3-06-26"><a href="#day3-06-26" class="headerlink" title="day3 06.26"></a>day3 06.26</h1><ol>
<li><h3 id="TeamTraining：The-2014-ACM-ICPC-Asia-Mudanjiang-Regional-Contest-—-rank1"><a href="#TeamTraining：The-2014-ACM-ICPC-Asia-Mudanjiang-Regional-Contest-—-rank1" class="headerlink" title="TeamTraining：The 2014 ACM-ICPC Asia Mudanjiang Regional Contest — rank1"></a><a href="http://icpc.njust.edu.cn/Contest/1098/" target="_blank" rel="external">TeamTraining：The 2014 ACM-ICPC Asia Mudanjiang Regional Contest — rank1</a></h3><p><del>A    Average Score（模拟）</del><br>B    Building Fire Stations（二分+贪心）<br>C    Card Game（。。。）<br>D    Domination（概率DP）<br><del>E    Excavator Contest（构造）</del><br>F    Fiber-optic Network（树形DP）<br>G    Garden and Sprinklers（数论）<br>H    Hierarchical Notation（模拟）<br>I    Information Entropy（数学）<br>J    Jacobi Pattern（。。。）<br>K    Known Notation（DP）</p>
</li>
<li><h3 id="Summarize-2"><a href="#Summarize-2" class="headerlink" title="Summarize"></a>Summarize</h3><p>   头天晚上没睡好，比赛的时候一直昏昏沉沉，敲A的时候脑袋都不太灵光居然没抢到1血。和天神讨论了一下B题，总感觉思路很接近但就是听不懂他的各种细节… 然后大佬莫名其妙就A了，果然是我太弱orz。后来就一直和Messy纠结E的构造，想好了构造方法却不知道要怎么敲代码… 脑袋一片空白全程挂机到结束… 大佬队友们带飞居然还能拿到rank1，penalty非常吉利，真是66666。后来看了一下现场榜，五题手快居然有金，这难道是在暗示着什么（大雾），不过别人家的这个罚时啊，真的是手速+正确率很服气。  </p>
</li>
<li><h3 id="Chaos-2"><a href="#Chaos-2" class="headerlink" title="Chaos"></a>Chaos</h3><p>   补题全程只写了一道大模拟= = 抛开晚饭时间回去洗了个澡这种琐碎事，仍然是效率低下的一天。  </p>
</li>
<li><h3 id="ToDoList-2"><a href="#ToDoList-2" class="headerlink" title="ToDoList"></a>ToDoList</h3><p> 。    no new missions  </p>
<p> ​</p>
</li>
</ol>
<h1 id="day4-06-27"><a href="#day4-06-27" class="headerlink" title="day4 06.27"></a>day4 06.27</h1><ol>
<li><h3 id="TeamTraining：2013-Asia-Changsha-Regional-Contest-—-no-rank"><a href="#TeamTraining：2013-Asia-Changsha-Regional-Contest-—-no-rank" class="headerlink" title="TeamTraining：2013 Asia Changsha Regional Contest — no rank"></a><a href="http://icpc.njust.edu.cn/Contest/1106/" target="_blank" rel="external">TeamTraining：2013 Asia Changsha Regional Contest — no rank</a></h3><p><del>A    Alice’s Print Service（优先队列）</del><br>B    Bob’s new toy（树形DP+RMQ）<br>C    Collision（计算几何）<br>D    Arnold（斐波拉契）<br>E    Easy Problem Once More（。。。）<br><del>F    Winter’s Coming（轮廓线DP）</del><br>G    Graph Reconstruction（构造）<br>H    Skycity（计算几何）<br>I    LIKE vs CANDLE（树形DP）<br>J    Josephina and RPG（概率DP）<br>K    Pocket Cube（模拟）</p>
</li>
<li><h3 id="Summarize-3"><a href="#Summarize-3" class="headerlink" title="Summarize"></a>Summarize</h3><p>   鬼知道鱼头为什么如此偏执地要圈zoj的题… 不能submit于是不计rank的一场比赛，就有点不太有兴致继续做下去… 这真是一种不好的心态= = A题思路蛮好想的，可惜在处理边界的时候想当然了，图简单随便写了一个INF值也导致挂掉… 还被myt各种嘲笑🙄️F一道很显然的插头DP，可是因为分不清左右就放弃了… 后来看题解发现其实判断条件很简单。现在想想，每次我妹问我题时我说她根本没有动脑认真去思考，今天我不也是这样的吗。  </p>
</li>
<li><h3 id="Chaos-3"><a href="#Chaos-3" class="headerlink" title="Chaos"></a>Chaos</h3><p>   重新熟悉了一下轮廓线DP补完F题，最大的收获是，数组开小居然会导致Time Limit Exceeded、Output Limit Exceeded这些奇奇怪怪的错误= = 有点懒不想写题解… 补补前天的CF吧，顺便坐等今天的CF。  </p>
</li>
<li><h3 id="ToDoList-3"><a href="#ToDoList-3" class="headerlink" title="ToDoList"></a>ToDoList</h3><p> 。    no new missions  </p>
</li>
<li><h3 id="CF-421-div-2"><a href="#CF-421-div-2" class="headerlink" title="CF # 421 div.2"></a><a href="http://codeforces.com/contest/820" target="_blank" rel="external">CF # 421 div.2</a></h3><p> <del>A    Mister B and Book Reading     x3644</del><br> <del>B    Mister B and Angle in Polygon     x2620</del><br> C    Mister B and Boring Game     x37<br> D    Mister B and PR Shifts     x209<br> E    Mister B and Beacons on Field     x2</p>
<p> 　　B题写了好久，果然我的二分姿势还是有待提高。疯狂讨论c题的各种if，结果题目有错误… 这就是我打的这么多比赛都unrated的理由吗🤷‍♀️  </p>
<p> ​</p>
</li>
</ol>
<h1 id="day5-06-28"><a href="#day5-06-28" class="headerlink" title="day5 06.28"></a>day5 06.28</h1><ol>
<li><h3 id="TeamTraining：2012-Asia-Changchun-Regional-Contest-—-no-rank"><a href="#TeamTraining：2012-Asia-Changchun-Regional-Contest-—-no-rank" class="headerlink" title="TeamTraining：2012 Asia Changchun Regional Contest — no rank"></a><a href="http://icpc.njust.edu.cn/Contest/1100/" target="_blank" rel="external">TeamTraining：2012 Asia Changchun Regional Contest — no rank</a></h3><p>A    Alice and Bob（RMQ）<br><del>B    Bit Magic（2-SAT）</del><br>C    The Little Girl who Picks Mushrooms（模拟）<br>D    Simple Function（数论）<br><del>E    Conquer a New Region（并查集）</del><br>F    Fantastic Necklace（。。。）<br>G    Palindromic Substring（后缀数组）<br><del>H    Math Magic（DP）</del><br>I    Polaris of Pandora（线段树）<br><del>J    Split the Rectangle（LCA）</del><br>K    Yukari’s Birthday（枚举+二分）</p>
</li>
<li><h3 id="Summarize-4"><a href="#Summarize-4" class="headerlink" title="Summarize"></a>Summarize</h3><p>   以为2-SAT是我的part，结果各种建边错误segmentation fault+wrong answer六发罚时爆炸。果然有模版只是第一步，理解不够什么都于事无补。J题可做性更高，可惜开得太迟。又是大佬队友带飞的一场比赛…  </p>
</li>
<li><h3 id="Chaos-4"><a href="#Chaos-4" class="headerlink" title="Chaos"></a>Chaos</h3><p>   午觉睡太久，原本的计划完全打乱，醒过来之后就一阵烦躁啊啊啊啊啊啊啊。和马老师一起去一号门买西瓜，他说小姑娘你这状态不对啊，睡足之后不应该很精神吗，我说睡久了就是很烦嘛，他说你都不会好好管理自己的情绪这不行的啊，然后我眼泪唰一下就下来了。反正走在我的右手边也不会看到我在哭的对吧。  </p>
<p> 　　晚饭之后过掉了J、E、H，DP弱到照着队友AC的代码写出来也还要调试半天😔。不过和马老师一起吃吃晚饭调调代码心情又好很多，果然女孩子还是情绪化啊。  </p>
</li>
<li><h3 id="ToDoList-4"><a href="#ToDoList-4" class="headerlink" title="ToDoList"></a>ToDoList</h3><p>。    复习2-SAT，刷题  </p>
<p>​</p>
</li>
</ol>
<h1 id="day6-06-29"><a href="#day6-06-29" class="headerlink" title="day6 06.29"></a>day6 06.29</h1><ol>
<li><h3 id="TeamTraining：2011-Asia-Dalian-Regional-Contest-—-rank-1"><a href="#TeamTraining：2011-Asia-Dalian-Regional-Contest-—-rank-1" class="headerlink" title="TeamTraining：2011 Asia Dalian Regional Contest — rank 1"></a><a href="http://icpc.njust.edu.cn/Contest/1101/" target="_blank" rel="external">TeamTraining：2011 Asia Dalian Regional Contest — rank 1</a></h3><p>A    Compress the String（回溯）<br>B    Adding New Machine（线段树）<br>C    The Last Puzzle（区间DP）<br><del>D    Hexadecimal View（模拟）</del><br>E    Number String（DP）<br>F    Draw a Mess（并查集）<br><del>G    Rescue the Rabbit（AC自动机+状压DP）</del><br>H    Advanture of Xiaoxingxing（计算几何）<br>I    The Boss on Mars（数学）<br>J    Chess Board（。。。）</p>
</li>
<li><h3 id="Summarize-5"><a href="#Summarize-5" class="headerlink" title="Summarize"></a>Summarize</h3><p>   睡过头的队友… 然后就写了一上午的AC自动机= = 模版什么的都很easy，问题还是出在DP转移上… 哎还是要练DP啊😕 听说有两道线段树，可惜都没时间去开题。看了一下现场榜，5题手快能有金，如果能在G题出问题的时候让天神一起来考虑一下转移，我再去开一道线段树，说不定就赢了呢（大雾）。  </p>
</li>
<li><h3 id="Chaos-5"><a href="#Chaos-5" class="headerlink" title="Chaos"></a>Chaos</h3><p>   今天… 玩了一天的纪念碑谷和folks。嗯，今天又是一事无成的一天哦🙃  </p>
</li>
<li><h3 id="ToDoList-5"><a href="#ToDoList-5" class="headerlink" title="ToDoList"></a>ToDoList</h3><p> 。　复习AC自动机，刷题  </p>
<p> ​</p>
</li>
</ol>
<h1 id="day7-06-30"><a href="#day7-06-30" class="headerlink" title="day7 06.30"></a>day7 06.30</h1><ol>
<li><h3 id="TeamTraining：2010-Asia-Chengdu-Regional-Contest-—-rank-2"><a href="#TeamTraining：2010-Asia-Chengdu-Regional-Contest-—-rank-2" class="headerlink" title="TeamTraining：2010 Asia Chengdu Regional Contest — rank 2"></a><a href="http://icpc.njust.edu.cn/Contest/1102/" target="_blank" rel="external">TeamTraining：2010 Asia Chengdu Regional Contest — rank 2</a></h3><p><del>A    Balanced Number（数位DP）</del><br>B    Battle over Cities（树链剖分+LCA）<br>C    Binary Number（模拟）<br>D    Detector Placement（计算几何）<br><del>E    Double Maze（搜索+模拟）</del><br>F    Error Curves（三分）<br><del>G    Go Deeper（2-SAT）</del><br>H    Jenga（。。。）<br>I    Rescue（分治）<br><del>J    Similarity（最佳匹配）</del><br>K    Snooker Referee（二叉树）</p>
</li>
<li><h3 id="Summarize-6"><a href="#Summarize-6" class="headerlink" title="Summarize"></a>Summarize</h3><p>   开了一道数位dp，写了半天，不过样例… 开了一道2-SAT，写了半天，wa… 然后莫名其妙天神就把我的A调出样例了？？？然后莫名其妙他交了一发就1A了？？？队里有DP大佬为什么还要让我写DP自取其辱啊（摔桌）。后来发现2-SAT是跪在初始化，所以一定要记住二分的题每次都要初始化。看前两个队都过了J题，Messy看了题目想想想了一会儿就说这是个网络流的题，给我讲了一下神奇的构图然后我上去十分钟敲了一个最佳匹配的板子居然就过了… 对比一下前两题我浪费的时间，就觉得很梦幻，简直怀疑人生。  </p>
</li>
<li><h3 id="Chaos-6"><a href="#Chaos-6" class="headerlink" title="Chaos"></a>Chaos</h3><p>   如果我说我是在7月4号补了6月30号的Chaos，那大家一定会原谅我对于那一天所有事情的遗忘（还不是你拖延症）。  </p>
</li>
</ol>
<ol>
<li><h3 id="ToDoList-6"><a href="#ToDoList-6" class="headerlink" title="ToDoList"></a>ToDoList</h3><p>。　学习数位DP，整理模版  </p>
<p>​</p>
</li>
</ol>
<h1 id="day8-07-01"><a href="#day8-07-01" class="headerlink" title="day8 07.01"></a>day8 07.01</h1><ol>
<li><h3 id="TeamTraining：2011-Asia-Beijing-Regional-Contest-—-rank-1"><a href="#TeamTraining：2011-Asia-Beijing-Regional-Contest-—-rank-1" class="headerlink" title="TeamTraining：2011 Asia Beijing Regional Contest — rank 1"></a><a href="http://icpc.njust.edu.cn/Contest/1103/" target="_blank" rel="external">TeamTraining：2011 Asia Beijing Regional Contest — rank 1</a></h3><p><del>A    Qin Shi Huang’s National Road System（最小生成树）</del><br>B    Hou Yi’s secret（枚举）<br>C    Three Kingdom Chess（模拟）<br>D    The Voyages of Zheng He（插头DP）<br>E    Peach Blossom Spring（DP）<br>F    Harry Potter and the holy banquet（数论）<br>G    ALetter to Programmers（计算几何）<br>H    Healing（。。。）<br>I    Activation（概率DP）<br><del>J    GemAnd Prince（模拟+搜索）</del></p>
</li>
<li><h3 id="Summarize-7"><a href="#Summarize-7" class="headerlink" title="Summarize"></a>Summarize</h3><p>   我也不知道B题和I题发生了什么反正我队友就AC了… 全程J题大模拟，虽然中间MLE但强行字符串hash一发也就莫名其妙A掉了然后发现全场只有我队过了这题hhh。后来Messy看了一下榜，发现A题大概是可做的？然后三（划掉，其实只有俩大神队友在脑洞大开）个人讨论了一下，他们就开始告诉我要怎么写… 虽然各种手残写完之后还de了半天bug，但是1A+1血还是sohappy呀~ 虽然还有50min结束，但我们已经开始挂机了，就这样欢声笑语打出了最后一场比赛的GGending。  </p>
</li>
<li><h3 id="Chaos-7"><a href="#Chaos-7" class="headerlink" title="Chaos"></a>Chaos</h3><p>   木有下文别看了，比赛完之后就开开心心跟着马老师跑路啦hhh。 </p>
</li>
<li><h3 id="ToDoList-7"><a href="#ToDoList-7" class="headerlink" title="ToDoList"></a>ToDoList</h3><p> 。　no new missions   </p>
</li>
</ol>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　暑假集训个人日常（阶段一）。  &lt;/p&gt;
    
    </summary>
    
      <category term="ACM训练记录" scheme="http://thea-r.github.io/categories/ACM%E8%AE%AD%E7%BB%83%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="record" scheme="http://thea-r.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>HDU4688 Cut the Cake</title>
    <link href="http://thea-r.github.io/2017/06/24/HDU4688-Cut-the-Cake/"/>
    <id>http://thea-r.github.io/2017/06/24/HDU4688-Cut-the-Cake/</id>
    <published>2017-06-24T13:07:08.000Z</published>
    <updated>2018-07-01T09:53:36.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2013 Multi-University Training Contest 9  </p>
<p>　　题意：给定一个宽为w长为h的矩形，矩形中n个点组成凸多边形，按多边形的边每次将矩形一分为二，对凸多边形所在部分继续操作一分为二的操作，直至完全切割出凸多边形。若每一次切割的代价为切割线的长度，求最小代价。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4688" target="_blank" rel="external"> - 原题链接</a><br><a id="more"></a>  </p>
<p>　　在网上搜到一位大佬的<a href="http://blog.csdn.net/dslovemz/article/details/10129535" target="_blank" rel="external">解题报告</a>，持续懵逼… 看不懂init，看不懂dp，计算几何及dp渣渣啃了半天昏昏欲睡🌚  </p>
<p>　　按输入顺序相邻两点p[i]和p[i+1]建边line[i]，分别记p[i]和p[i+1]为line[i]的左右端点，重点是理解以下数组的作用：  </p>
<ul>
<li>ld[i]：line[i]左端点到边界的最短距离（此处的距离是指，line[i]的左端点到line[i]与边界的交点的距离，下同）  </li>
<li>rd[i]：line[i]右端点到边界的最短距离  </li>
<li>rel[i][j]：line[i]左端点到line[j]更近为true，否则右端点更近，为false（此处的距离是指，line[i]的左端点到line[i]与line[j]的交点的距离，下同）  </li>
<li>dd[i][j]：line[i]某端点到line[j]的最短距离（rel[i][j]为true是左端点，否则是右端点）  </li>
</ul>
<p>　　搞懂了init计算，剩下的dp过程就简单很多，f[i][j]表示其余边已经切割完成的前提下切割i~j-1所需要的最小代价，f[i][j]=f[i][k]+f[k+1][j]+cost(k)，为简化，点和边数组扩展一倍循环存储，详情见代码。  </p>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">1e9</span>, def=<span class="number">1e-9</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">double</span> w, h, ld[maxn], rd[maxn], dd[maxn][maxn], f[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> rel[maxn][maxn], vis[maxn][maxn];</div><div class="line"><span class="keyword">struct</span> Point</div><div class="line">&#123;</div><div class="line">	<span class="keyword">double</span> x, y;</div><div class="line">	Point(<span class="keyword">double</span> <span class="number">_</span>x=<span class="number">0</span>, <span class="keyword">double</span> <span class="number">_</span>y=<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		x=<span class="number">_</span>x, y=<span class="number">_</span>y;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sc</span><span class="params">()</span></div><div class="line">	</span>&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(Point t)</span></div><div class="line">	</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">sqrt</span>((x-t.x)*(x-t.x)+(y-t.y)*(y-t.y));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">double</span> <span class="keyword">operator</span> *(Point t)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> x*t.y-y*t.x;</div><div class="line">	&#125;</div><div class="line">	Point <span class="keyword">operator</span> -(Point t)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> Point(x-t.x, y-t.y);</div><div class="line">	&#125;</div><div class="line">&#125;p[maxn];</div><div class="line"><span class="keyword">struct</span> Line</div><div class="line">&#123;</div><div class="line">	Point u, v;</div><div class="line">	<span class="keyword">double</span> len;</div><div class="line">	Line()&#123;&#125;</div><div class="line">	Line(Point <span class="number">_u</span>, Point <span class="number">_</span>v)</div><div class="line">	&#123;</div><div class="line">		u=<span class="number">_u</span>, v=<span class="number">_</span>v, len=<span class="number">_u</span>.dis(<span class="number">_</span>v);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">par</span><span class="params">(Line t)</span></div><div class="line">	</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">fabs</span>((v-u)*(t.v-t.u))&lt;=def;</div><div class="line">	&#125;</div><div class="line">	<span class="function">Point <span class="title">inter</span><span class="params">(Line t)</span></div><div class="line">	</span>&#123;</div><div class="line">		<span class="keyword">double</span> s1=(t.v-u)*(t.u-u), s2=(t.u-v)*(t.v-v);</div><div class="line">		<span class="keyword">return</span> Point((u.x*s2+v.x*s1)/(s1+s2), (u.y*s2+v.y*s1)/(s1+s2));</div><div class="line">	&#125;</div><div class="line">&#125;line[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*<span class="number">2</span>; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n*<span class="number">2</span>; j++) <span class="keyword">if</span>(i!=j)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(line[i].par(line[j]))</div><div class="line">			&#123;</div><div class="line">				rel[i][j]=<span class="literal">true</span>;</div><div class="line">				dd[i][j]=inf;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				Point o=line[i].inter(line[j]);</div><div class="line">				<span class="keyword">double</span> l=o.dis(p[i]), r=o.dis(p[i+<span class="number">1</span>]);</div><div class="line">				<span class="keyword">if</span>(l&lt;r)</div><div class="line">				&#123;</div><div class="line">					rel[i][j]=<span class="literal">true</span>;</div><div class="line">					dd[i][j]=l;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span></div><div class="line">				&#123;</div><div class="line">					rel[i][j]=<span class="literal">false</span>;</div><div class="line">					dd[i][j]=r;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	Point g[<span class="number">5</span>]=&#123;Point(<span class="number">0</span>, <span class="number">0</span>), Point(w, <span class="number">0</span>), Point (w, h), Point(<span class="number">0</span>, h), Point(<span class="number">0</span>, <span class="number">0</span>)&#125;;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>*n; i++)</div><div class="line">	&#123;</div><div class="line">		ld[i]=rd[i]=inf;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)</div><div class="line">		&#123;</div><div class="line">			Line tp=Line(g[j], g[j+<span class="number">1</span>]);</div><div class="line">			<span class="keyword">if</span>(!line[i].par(tp))</div><div class="line">			&#123;</div><div class="line">				Point o=line[i].inter(tp);</div><div class="line">				<span class="keyword">double</span> l=o.dis(p[i]), r=o.dis(p[i+<span class="number">1</span>]);</div><div class="line">				<span class="keyword">if</span>(l&lt;r)	ld[i]=min(ld[i], l);</div><div class="line">				<span class="keyword">else</span> rd[i]=min(rd[i], r);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(i&gt;=j)	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(vis[i][j])	<span class="keyword">return</span> f[i][j];</div><div class="line"></div><div class="line">	f[i][j]=inf;</div><div class="line">	vis[i][j]=<span class="literal">true</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=i; k&lt;j; k++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">double</span> l=ld[k], r=rd[k];</div><div class="line">		<span class="keyword">if</span>(rel[k][i<span class="number">-1</span>])	l=min(l, dd[k][i<span class="number">-1</span>]);	<span class="comment">//前i-1条边已经处理好，如果到line[i]的距离比到边界的距离更近，cost中应该加上前者</span></div><div class="line">		<span class="keyword">else</span> r=min(r, dd[k][i<span class="number">-1</span>]);</div><div class="line">		<span class="keyword">if</span>(rel[k][j])	l=min(l, dd[k][j]);</div><div class="line">		<span class="keyword">else</span> r=min(r, dd[k][j]);</div><div class="line">		f[i][j]=min(f[i][j], DP(i, k)+DP(k+<span class="number">1</span>, j)+l+r+line[k].len);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> f[i][j];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%lf%lf"</span>, &amp;n, &amp;w, &amp;h)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">		<span class="built_in">memset</span>(rel, <span class="number">0</span>, <span class="keyword">sizeof</span> rel);</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)	p[i].sc();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&lt;=n*<span class="number">2</span>; i++)	p[i]=p[i-n];	<span class="comment">//i&lt;=n*2</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*<span class="number">2</span>; i++)	line[i]=Line(p[i], p[i+<span class="number">1</span>]);</div><div class="line">	</div><div class="line">		<span class="keyword">double</span> ans=inf;</div><div class="line">		Init();</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)	ans=min(ans, DP(i+<span class="number">1</span>, i+n)+ld[i]+rd[i]+line[i].len);</div><div class="line">		<span class="comment">//枚举第一刀，此时cost一定是到边界的左右距离+线段长度</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.6f\n"</span>, ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2013 Multi-University Training Contest 9  &lt;/p&gt;
&lt;p&gt;　　题意：给定一个宽为w长为h的矩形，矩形中n个点组成凸多边形，按多边形的边每次将矩形一分为二，对凸多边形所在部分继续操作一分为二的操作，直至完全切割出凸多边形。若每一次切割的代价为切割线的长度，求最小代价。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4688&quot;&gt; - 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="http://thea-r.github.io/tags/DP/"/>
    
      <category term="2013多校" scheme="http://thea-r.github.io/tags/2013%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="HDU" scheme="http://thea-r.github.io/tags/HDU/"/>
    
      <category term="计算几何" scheme="http://thea-r.github.io/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>HDU4689 Derangement</title>
    <link href="http://thea-r.github.io/2017/06/24/HDU4689-Derangement/"/>
    <id>http://thea-r.github.io/2017/06/24/HDU4689-Derangement/</id>
    <published>2017-06-24T08:50:10.000Z</published>
    <updated>2018-07-01T09:53:56.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2013 Multi-University Training Contest 9  </p>
<p>　　题意：定义初始排列为1、2、…、n，定义一个n排列A[]， 若i&gt;A[i]表示为’+’，i<a[i]表示为'-'，给定一个排列的表示方法（只包含'+'、'-'长度为n字符串），问有多少个这样的排列。[ -="" 原题链接](http:="" acm.hdu.edu.cn="" showproblem.php?pid="4689)" <a="" id="more">  </a[i]表示为'-'，给定一个排列的表示方法（只包含'+'、'-'长度为n字符串），问有多少个这样的排列。[></p>
<p>　　新队伍组队第一场啊，有DP大佬队友的感觉真是好。  </p>
<p>　　f[i][j]表示放置用前i个数字放置前i个位置，填满了所有’-‘，剩下j个’+’没填（也相当于有j个数字要放置到第i+1~n位）的总方案数。  </p>
<p>　　初始条件f[0][0]=1，转移如下：  </p>
<ul>
<li>当a[i]为’+’<ul>
<li>当前数字i在前面挑一个’+’放置，此时当前’+’未填，j不变：f[i][j]+=f[i-1][j]*j</li>
<li>当前数字i不放置，此时当前’+’未填，j增加：f[i][j]+=f[i-1][j-1]</li>
</ul>
</li>
</ul>
<ul>
<li>当a[i]为’-‘<ul>
<li>在前j个未放置的数字中挑选一个放置到当前位置，当前数字i不放置，此时j不变：f[i][j]+=f[i-1][j]</li>
<li>在前j+1个未放置的数字中挑选一个放置到当前位置，当前数字i在前面挑一个’+’放置，此时j减少：f[i][j]+=f[i-1][j+1]*(j+1)*(j+1)</li>
</ul>
</li>
</ul>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">20</span>+<span class="number">5</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lint;</div><div class="line"></div><div class="line">lint f[maxn][maxn];</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s+<span class="number">1</span>)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</div><div class="line">		<span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">		f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i; j++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(s[i]==<span class="string">'+'</span>)</div><div class="line">				&#123;</div><div class="line">					f[i][j]+=f[i<span class="number">-1</span>][j]*j;</div><div class="line">					<span class="keyword">if</span>(j)	f[i][j]+=f[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span>	f[i][j]+=(f[i<span class="number">-1</span>][j]*j+f[i<span class="number">-1</span>][j+<span class="number">1</span>]*(j+<span class="number">1</span>)*(j+<span class="number">1</span>));</div><div class="line">			&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[n][<span class="number">0</span>]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2013 Multi-University Training Contest 9  &lt;/p&gt;
&lt;p&gt;　　题意：定义初始排列为1、2、…、n，定义一个n排列A[]， 若i&amp;gt;A[i]表示为’+’，i&lt;A[i]表示为&#39;-&#39;，给定一个排列的表示方法（只包含&#39;+&#39;、&#39;-&#39;长度为n字符串），问有多少个这样的排列。[ - 原题链接](http://acm.hdu.edu.cn/showproblem.php?pid=4689)
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="http://thea-r.github.io/tags/DP/"/>
    
      <category term="2013多校" scheme="http://thea-r.github.io/tags/2013%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="HDU" scheme="http://thea-r.github.io/tags/HDU/"/>
    
  </entry>
  
  <entry>
    <title>POJ1486 Sorting Slides</title>
    <link href="http://thea-r.github.io/2016/10/21/POJ1486-Sorting-Slides/"/>
    <id>http://thea-r.github.io/2016/10/21/POJ1486-Sorting-Slides/</id>
    <published>2016-10-21T13:23:45.000Z</published>
    <updated>2018-07-01T09:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　题意：给定n个矩形n个点，将矩形和点一一对应，判断是否存在唯一的配对情况。<a href="http://poj.org/problem?id=1486" target="_blank" rel="external"> - 原题链接</a><br><a id="more"></a>  </p>
<p>　　先找出任意完备匹配，再枚举匹配中的每一条边，若删去该边仍能找到完备匹配，则该该边对应的矩形没有唯一配对方案。  </p>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">26</span>+<span class="number">5</span>, maxm=<span class="number">1000</span>+<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, n, ans, from[maxn], rec[maxn];</div><div class="line"><span class="keyword">bool</span> mmp[maxn][maxn], vis[maxn];</div><div class="line"><span class="keyword">struct</span> point</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> x, y;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sc</span><span class="params">()</span> </span>&#123;	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y); &#125;</div><div class="line">&#125;p[maxn];</div><div class="line"><span class="keyword">struct</span> matrix</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> x1, y1, x2, y2;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sc</span><span class="params">()</span> </span>&#123;	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x1, &amp;x2, &amp;y1, &amp;y2); &#125;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(point t)</span> </span>&#123;	<span class="keyword">return</span> x1&lt;=t.x&amp;&amp;t.x&lt;=x2&amp;&amp;y1&lt;=t.y&amp;&amp;t.y&lt;=y2; &#125;</div><div class="line">&#125;mat[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Read</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)	mat[i].sc();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)	p[i].sc();</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>; v&lt;=n; v++) <span class="keyword">if</span>(!vis[v] &amp;&amp; mmp[u][v])</div><div class="line">	&#123;</div><div class="line">		vis[v]=<span class="literal">true</span>;</div><div class="line">		<span class="keyword">if</span>(!from[v] || Dfs(from[v]))</div><div class="line">		&#123;</div><div class="line">			from[v]=u;</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;(<span class="keyword">int</span>)mmp[i][j];</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Work</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Heap %d\n"</span>, ++T);</div><div class="line"></div><div class="line">	<span class="built_in">memset</span>(mmp, <span class="literal">false</span>, <span class="keyword">sizeof</span> mmp);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</div><div class="line">			<span class="keyword">if</span>(mat[j].in(p[i]))</div><div class="line">				mmp[i][j]=<span class="literal">true</span>;</div><div class="line"></div><div class="line">	ans=<span class="number">0</span>;</div><div class="line">	<span class="built_in">memset</span>(from, <span class="number">0</span>, <span class="keyword">sizeof</span> from);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">		ans+=Dfs(i);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(ans!=n)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"none\n\n"</span>);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">bool</span> flag=<span class="literal">false</span>;</div><div class="line">	<span class="built_in">memcpy</span>(rec, from, <span class="keyword">sizeof</span> rec);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">	&#123;</div><div class="line">		mmp[rec[i]][i]=<span class="literal">false</span>;</div><div class="line"></div><div class="line">		ans=<span class="number">0</span>;</div><div class="line">		<span class="built_in">memset</span>(from, <span class="number">0</span>, <span class="keyword">sizeof</span> from);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">			ans+=Dfs(j);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(ans!=n)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(flag)	<span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"(%c,%d)"</span>, i+<span class="string">'A'</span><span class="number">-1</span>, rec[i]);</div><div class="line">			flag=<span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">		mmp[rec[i]][i]=<span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(!flag)	<span class="built_in">printf</span>(<span class="string">"none"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)!=EOF&amp;&amp;n)	Read(), Work();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　题意：给定n个矩形n个点，将矩形和点一一对应，判断是否存在唯一的配对情况。&lt;a href=&quot;http://poj.org/problem?id=1486&quot;&gt; - 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="POJ" scheme="http://thea-r.github.io/tags/POJ/"/>
    
      <category term="二分匹配" scheme="http://thea-r.github.io/tags/%E4%BA%8C%E5%88%86%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>HDU5835 Danganronpa</title>
    <link href="http://thea-r.github.io/2016/08/20/HDU5835-Danganronpa/"/>
    <id>http://thea-r.github.io/2016/08/20/HDU5835-Danganronpa/</id>
    <published>2016-08-20T10:06:30.000Z</published>
    <updated>2018-07-01T09:54:20.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2016 CCPC网络赛  </p>
<p>　　题意：每桌放两个物品，分别作为特殊礼物和普通礼物，要求任意相邻桌的特殊礼物不同种类。现在给定n种物品的数量，求最多能布置多少桌。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5835" target="_blank" rel="external"> - 原题链接</a><br><a id="more"></a>  </p>
<p>　　假设现在已经放了i-1种物品，记物品总数为sum，其中需要同类相邻物品有ret+1个。在放置第i种物品时处理三种情况：</p>
<ul>
<li>若a[i]&gt;=sum，则第i种物品一一插空，更新ret</li>
<li>若a[i]&gt;=ret，先插空隔开同类相邻物品，剩余随意插空，更新ret为0</li>
<li>若a[i]&lt;ret，先插空隔开相邻物品，更新ret</li>
</ul>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10</span>+<span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, n, a[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> TT=<span class="number">1</span>; TT&lt;=T; TT++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        sort(a+<span class="number">1</span>, a+<span class="number">1</span>+n);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>, ret=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=<span class="number">1</span>; i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(a[i]&gt;=sum)    ret=a[i]<span class="number">-1</span>-sum;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=ret)    ret=<span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span>    ret-=a[i];</div><div class="line">            sum+=a[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, TT, min(sum-ret, sum/<span class="number">2</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2016 CCPC网络赛  &lt;/p&gt;
&lt;p&gt;　　题意：每桌放两个物品，分别作为特殊礼物和普通礼物，要求任意相邻桌的特殊礼物不同种类。现在给定n种物品的数量，求最多能布置多少桌。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5835&quot;&gt; - 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="HDU" scheme="http://thea-r.github.io/tags/HDU/"/>
    
      <category term="2016CCPC" scheme="http://thea-r.github.io/tags/2016CCPC/"/>
    
      <category term="杂题" scheme="http://thea-r.github.io/tags/%E6%9D%82%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>HDU5862 Counting Intersections</title>
    <link href="http://thea-r.github.io/2016/08/19/HDU5862-Counting-Intersections/"/>
    <id>http://thea-r.github.io/2016/08/19/HDU5862-Counting-Intersections/</id>
    <published>2016-08-19T08:04:17.000Z</published>
    <updated>2018-07-01T09:54:23.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2016 Multi-University Training Contest 10  </p>
<p>　　题意：给定n条垂直于坐标轴的线段，求交点个数。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5862" target="_blank" rel="external"> - 原题链接</a><br><a id="more"></a>  </p>
<p>　　题目中线段被限制为垂直或水平。将线段坐标离散化后，按纵坐标从小到大扫描。遇到垂直线段的下端点，则插入该线段的横坐标值；遇到水平线段，则查询x1[i]到x2[i]的区间和；遇到垂直线段的上端点，则删除该线段的横坐标值。线段树、树状数组均可以维护。<br>　　需要注意的是纵坐标相同时，三种操作的顺序不能变。第一次的代码开了三个vector来记录三种操作序列，结果MLE… 后来改了一下，只用一个vector来记录相同纵坐标的点，每种操作赋优先级0、1、2，在处理每一个vector时先进行内部排序，2418MS AC。两份代码均在下方给出。  </p>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AC代码</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lint;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, n, N, M, a[maxn&lt;&lt;<span class="number">1</span>], b[maxn&lt;&lt;<span class="number">1</span>], s[maxn&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">struct</span> line</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x1, y1, x2, y2, d;</div><div class="line">    line(<span class="keyword">int</span> xx1=<span class="number">0</span>, <span class="keyword">int</span> yy1=<span class="number">0</span>, <span class="keyword">int</span> xx2=<span class="number">0</span>, <span class="keyword">int</span> yy2=<span class="number">0</span>) &#123; x1=xx1, y1=yy1, x2=xx2, y2=yy2; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></div><div class="line">    </span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</div><div class="line">        <span class="keyword">if</span>(x1&gt;x2)    swap(x1, x2);</div><div class="line">        <span class="keyword">if</span>(y1&gt;y2)    swap(y1, y2);</div><div class="line">        a[++N]=x1, a[++N]=x2, b[++M]=y1, b[++M]=y2;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hash</span><span class="params">()</span></div><div class="line">    </span>&#123;</div><div class="line">        x1=lower_bound(a+<span class="number">1</span>, a+<span class="number">1</span>+N, x1)-a, x2=lower_bound(a+<span class="number">1</span>, a+<span class="number">1</span>+N, x2)-a;</div><div class="line">        y1=lower_bound(b+<span class="number">1</span>, b+<span class="number">1</span>+M, y1)-b, y2=lower_bound(b+<span class="number">1</span>, b+<span class="number">1</span>+M, y2)-b;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;seg[maxn];</div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> d, idx;</div><div class="line">    node(<span class="keyword">int</span> dd=<span class="number">0</span>, <span class="keyword">int</span> idxx=<span class="number">0</span>) &#123; d=dd, idx=idxx; &#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node&amp;t)<span class="keyword">const</span> &#123; <span class="keyword">return</span> d&lt;t.d; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;node&gt; vct[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> val)</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;=N; i+=lowbit(i))    s[i]+=val;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ans=<span class="number">0</span>)</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i; i-=lowbit(i))    ans+=s[i];</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=M; i++)    vct[i].clear();</div><div class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span> s);</div><div class="line">    N=M=<span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)    seg[i].read();</div><div class="line"></div><div class="line">        sort(a+<span class="number">1</span>, a+<span class="number">1</span>+N);</div><div class="line">        sort(b+<span class="number">1</span>, b+<span class="number">1</span>+M);</div><div class="line">        N=unique(a+<span class="number">1</span>, a+<span class="number">1</span>+N)-a<span class="number">-1</span>;</div><div class="line">        M=unique(b+<span class="number">1</span>, b+<span class="number">1</span>+M)-b<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)    seg[i].hash();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(seg[i].y1==seg[i].y2)    vct[seg[i].y1].push_back(node(<span class="number">1</span>, i));</div><div class="line">            <span class="keyword">else</span> vct[seg[i].y1].push_back(node(<span class="number">0</span>, i)), vct[seg[i].y2].push_back(node(<span class="number">2</span>, i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        lint ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=M; i++)</div><div class="line">        &#123;</div><div class="line">            sort(vct[i].begin(), vct[i].end());</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>, len=vct[i].size(); j&lt;len; j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(vct[i][j].d==<span class="number">0</span>)    Add(seg[vct[i][j].idx].x1, <span class="number">1</span>);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(vct[i][j].d==<span class="number">2</span>)    Add(seg[vct[i][j].idx].x1, <span class="number">-1</span>);</div><div class="line">                <span class="keyword">else</span> ans+=Query(seg[vct[i][j].idx].x2)-Query(seg[vct[i][j].idx].x1<span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">        Clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MLE代码</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span> + <span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lint;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, n, N, M, a[maxn&lt;&lt;<span class="number">1</span>], b[maxn&lt;&lt;<span class="number">1</span>], s[maxn&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vct1[maxn&lt;&lt;<span class="number">1</span>], vct2[maxn&lt;&lt;<span class="number">1</span>], vct3[maxn&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">struct</span> line</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x1, y1, x2, y2, d;</div><div class="line">    line(<span class="keyword">int</span> xx1=<span class="number">0</span>, <span class="keyword">int</span> yy1=<span class="number">0</span>, <span class="keyword">int</span> xx2=<span class="number">0</span>, <span class="keyword">int</span> yy2=<span class="number">0</span>) &#123; x1=xx1, y1=yy1, x2=xx2, y2=yy2; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></div><div class="line">    </span>&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</div><div class="line">        <span class="keyword">if</span>(x1&gt;x2)    swap(x1, x2);</div><div class="line">        <span class="keyword">if</span>(y1&gt;y2)    swap(y1, y2);</div><div class="line">        a[++N]=x1, a[++N]=x2, b[++M]=y1, b[++M]=y2;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hash</span><span class="params">()</span></div><div class="line">    </span>&#123;</div><div class="line">        x1=lower_bound(a+<span class="number">1</span>, a+<span class="number">1</span>+N, x1)-a, x2=lower_bound(a+<span class="number">1</span>, a+<span class="number">1</span>+N, x2)-a;</div><div class="line">        y1=lower_bound(b+<span class="number">1</span>, b+<span class="number">1</span>+M, y1)-b, y2=lower_bound(b+<span class="number">1</span>, b+<span class="number">1</span>+M, y2)-b;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;seg[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> val)</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;=N; i+=lowbit(i))    s[i]+=val;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ans=<span class="number">0</span>)</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x; i; i-=lowbit(i))    ans+=s[i];</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=M; i++)    vct1[i].clear(), vct2[i].clear(), vct3[i].clear();</div><div class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span> s);</div><div class="line">    N=M=<span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)    seg[i].read();</div><div class="line"></div><div class="line">        sort(a+<span class="number">1</span>, a+<span class="number">1</span>+N);</div><div class="line">        sort(b+<span class="number">1</span>, b+<span class="number">1</span>+M);</div><div class="line">        N=unique(a+<span class="number">1</span>, a+<span class="number">1</span>+N)-a<span class="number">-1</span>;</div><div class="line">        M=unique(b+<span class="number">1</span>, b+<span class="number">1</span>+M)-b<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)    seg[i].hash();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(seg[i].y1==seg[i].y2)    vct1[seg[i].y1].push_back(i);</div><div class="line">            <span class="keyword">else</span> vct2[seg[i].y1].push_back(i), vct3[seg[i].y2].push_back(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        lint ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=M; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>, len=vct2[i].size(); j&lt;len; j++)    Add(seg[vct2[i][j]].x1, <span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>, len=vct1[i].size(); j&lt;len; j++)    ans+=Query(seg[vct1[i][j]].x2)-Query(seg[vct1[i][j]].x1<span class="number">-1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>, len=vct3[i].size(); j&lt;len; j++)    Add(seg[vct3[i][j]].x1, <span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">        Clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2016 Multi-University Training Contest 10  &lt;/p&gt;
&lt;p&gt;　　题意：给定n条垂直于坐标轴的线段，求交点个数。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5862&quot;&gt; - 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="HDU" scheme="http://thea-r.github.io/tags/HDU/"/>
    
      <category term="2016多校" scheme="http://thea-r.github.io/tags/2016%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="树状数组" scheme="http://thea-r.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>HDU5861 Road</title>
    <link href="http://thea-r.github.io/2016/08/19/HDU5861-Road/"/>
    <id>http://thea-r.github.io/2016/08/19/HDU5861-Road/</id>
    <published>2016-08-19T08:04:03.000Z</published>
    <updated>2018-07-01T09:54:11.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2016 Multi-University Training Contest 10  </p>
<p>　　题意：一条大道被n个村庄分成n－1条路，每条道路开放一天的花费为c[i]，道路初始为关闭状态，可以任意选择开放或关闭某条道路，道路被关闭后不能再次开放。现在有m天的运输任务，每天从村庄l[i]运输货物到村庄r[i]，要求运输路程中的所有道路均为开放状态。求满足运输任务前提下的最小花费。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5861" target="_blank" rel="external"> - 原题链接</a><br><a id="more"></a>  </p>
<p>　　正反做两次线段树区间覆盖，得到第i条道路最早和最晚的占用时间，树状数组维护每天的总花费。<br>　　小trick，输入数据不保证l[i]&gt;r[i]。赛时一次AC，happy✌️  </p>
<p><br></p>
<hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">#include&lt;iostream&gt;</div><div class="line">#include&lt;cstdlib&gt;</div><div class="line">#include&lt;cstring&gt;</div><div class="line">#include&lt;vector&gt;</div><div class="line">#include&lt;cstdio&gt;</div><div class="line">#include&lt;cmath&gt;</div><div class="line">#include&lt;algorithm&gt;</div><div class="line">#define kl (k&lt;&lt;1)</div><div class="line">#define kr ((k&lt;&lt;1)+1)</div><div class="line">#define mid ((l+r)&gt;&gt;1)</div><div class="line">#define lowbit(x) ((x)&amp;-(x))</div><div class="line">using namespace std;</div><div class="line">const int maxn=2*1e5 + 10, INF=0x7f7f7f7f;</div><div class="line">typedef long long lint;</div><div class="line"></div><div class="line">int n, m, a[maxn], ql[maxn], qr[maxn];</div><div class="line">lint s[maxn];</div><div class="line">vector&lt;int&gt; vct[maxn];</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">    int x[2];</div><div class="line">    node(int l=0, int r=0, int c=0)&#123; x[0]=l, x[1]=r; &#125;</div><div class="line">&#125;tr[maxn&lt;&lt;2];</div><div class="line"></div><div class="line">void Build(int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">    tr[k].x[0]=tr[k].x[1]=-INF;</div><div class="line">    if(l==r)    return ;</div><div class="line">    Build(kl, l, mid);</div><div class="line">    Build(kr, mid+1, r);</div><div class="line">    return ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Push_down(int k, int f)</div><div class="line">&#123;</div><div class="line">    tr[kl].x[f]=max(tr[kl].x[f], tr[k].x[f]);</div><div class="line">    tr[kr].x[f]=max(tr[kr].x[f], tr[k].x[f]);</div><div class="line">    return ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Insert(int ll, int rr, int f, int val, int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">    if(rr &lt;l||r&lt; ll)    return ;</div><div class="line">    if(ll&lt;=l&amp;&amp;r&lt;=rr)</div><div class="line">    &#123;</div><div class="line">        tr[k].x[f]=val;</div><div class="line">        return ;</div><div class="line">    &#125;</div><div class="line">    Push_down(k, f);</div><div class="line">    Insert(ll, rr, f, val, kl, l, mid);</div><div class="line">    Insert(ll, rr, f, val, kr, mid+1, r);</div><div class="line">    return ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Add(int x, int val)</div><div class="line">&#123;</div><div class="line">    for(int i=x; i&lt;=m; i+=lowbit(i))    s[i]+=val;</div><div class="line">    return ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">lint Get(int x, lint sum=0)</div><div class="line">&#123;</div><div class="line">    for(int i=x; i; i-=lowbit(i))    sum+=s[i];</div><div class="line">    return sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Query(int x, int &amp;ll, int &amp;rr, int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">    if(l==r)</div><div class="line">    &#123;</div><div class="line">        ll=tr[k].x[0], rr=tr[k].x[1];</div><div class="line">        return ;</div><div class="line">    &#125;</div><div class="line">    Push_down(k, 0);</div><div class="line">    Push_down(k, 1);</div><div class="line">    if(x&lt;=mid)    Query(x, ll, rr, kl, l, mid);</div><div class="line">    else Query(x, ll, rr, kr, mid+1, r);</div><div class="line">    return ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    while(scanf("%d%d", &amp;n, &amp;m)!=EOF)</div><div class="line">    &#123;</div><div class="line">        for(int i=1; i&lt;n; i++)    scanf("%d", &amp;a[i]);</div><div class="line">        for(int i=1; i&lt;=m; i++)</div><div class="line">        &#123;</div><div class="line">            scanf("%d%d", &amp;ql[i], &amp;qr[i]);</div><div class="line">            if(ql[i]&gt;qr[i])    swap(ql[i], qr[i]);</div><div class="line">            --qr[i];</div><div class="line">        &#125;</div><div class="line">        Build();</div><div class="line">        for(int i=1; i&lt;=m; i++)    Insert(ql[i], qr[i], 0, i);</div><div class="line">        for(int i=m; i&gt;=1; i--)    Insert(ql[i], qr[i], 1, m-i+1);</div><div class="line"></div><div class="line">        for(int i=1, ll, rr; i&lt;n; i++)</div><div class="line">        &#123;</div><div class="line">            Query(i, rr, ll);</div><div class="line">            if(rr==-INF)    continue;</div><div class="line">            Add(m-ll+1, a[i]);</div><div class="line">            Add(rr+1, -a[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for(int i=1; i&lt;=m; i++)    printf("%lld\n", Get(i));</div><div class="line"></div><div class="line">        memset(s, 0, sizeof s);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2016 Multi-University Training Contest 10  &lt;/p&gt;
&lt;p&gt;　　题意：一条大道被n个村庄分成n－1条路，每条道路开放一天的花费为c[i]，道路初始为关闭状态，可以任意选择开放或关闭某条道路，道路被关闭后不能再次开放。现在有m天的运输任务，每天从村庄l[i]运输货物到村庄r[i]，要求运输路程中的所有道路均为开放状态。求满足运输任务前提下的最小花费。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5861&quot;&gt; - 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线段树" scheme="http://thea-r.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="HDU" scheme="http://thea-r.github.io/tags/HDU/"/>
    
      <category term="2016多校" scheme="http://thea-r.github.io/tags/2016%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="树状数组" scheme="http://thea-r.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="扫描线" scheme="http://thea-r.github.io/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>HDU5860 Death Sequence</title>
    <link href="http://thea-r.github.io/2016/08/19/HDU5860-Death-Sequence/"/>
    <id>http://thea-r.github.io/2016/08/19/HDU5860-Death-Sequence/</id>
    <published>2016-08-19T06:17:11.000Z</published>
    <updated>2018-07-01T09:54:00.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2016 Multi-University Training Contest 10  </p>
<p>　　题意：n个人报数，每一轮报数(i*k+1)的人淘汰，到队列末尾后剩余人员进行新一轮报数，直至全员淘汰。给定m次查询，求第j个出队者的序号。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5860" target="_blank" rel="external"> - 原题链接</a><br><a id="more"></a>  </p>
<p>　　类约瑟夫问题，但是不成环。<br>　　本题种当前总人数为n，编号1-n，则本轮i%k==1的人淘汰，淘汰总人数为(n+k-1)/k。剩下的人从1开始重编号，重复上一轮的过程。设i为第f[i]轮第g[i]个出局，则有以下递推关系式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f[i]=(i%k==<span class="number">1</span>) ? <span class="number">1</span> : f[i-(i+k<span class="number">-1</span>)/k]+<span class="number">1</span>;</div><div class="line">g[i]=(i%k==<span class="number">1</span>) ? (i+k<span class="number">-1</span>)/k : g[i-(i+k<span class="number">-1</span>)/k];</div></pre></td></tr></table></figure></p>
<p>　　预处理出前j轮淘汰的总人数cnt[j]，则i的出队序号为cnt[f[i]-1]+g[i]。  </p>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3</span>*<span class="number">1e6</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, n, m, k;</div><div class="line"><span class="keyword">int</span> tot, cnt[maxn], f[maxn], g[maxn], ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;m);</div><div class="line"></div><div class="line">        tot=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> tmp=n; tmp; tmp-=cnt[tot]-cnt[tot<span class="number">-1</span>])</div><div class="line">        &#123;</div><div class="line">            cnt[++tot]=(tmp+k<span class="number">-1</span>)/k;</div><div class="line">            cnt[tot]+=cnt[tot<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">        &#123;</div><div class="line">            f[i]=(i%k==<span class="number">1</span>) ? <span class="number">1</span> : f[i-(i+k<span class="number">-1</span>)/k]+<span class="number">1</span>;</div><div class="line">            g[i]=(i%k==<span class="number">1</span>) ? (i+k<span class="number">-1</span>)/k : g[i-(i+k<span class="number">-1</span>)/k];</div><div class="line">            ans[cnt[f[i]<span class="number">-1</span>]+g[i]]=i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, x; i&lt;=m; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[x]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2016 Multi-University Training Contest 10  &lt;/p&gt;
&lt;p&gt;　　题意：n个人报数，每一轮报数(i*k+1)的人淘汰，到队列末尾后剩余人员进行新一轮报数，直至全员淘汰。给定m次查询，求第j个出队者的序号。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5860&quot;&gt; - 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="HDU" scheme="http://thea-r.github.io/tags/HDU/"/>
    
      <category term="2016多校" scheme="http://thea-r.github.io/tags/2016%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="递推" scheme="http://thea-r.github.io/tags/%E9%80%92%E6%8E%A8/"/>
    
  </entry>
  
  <entry>
    <title>HDU5838 Mountain</title>
    <link href="http://thea-r.github.io/2016/08/16/HDU5838-Mountain/"/>
    <id>http://thea-r.github.io/2016/08/16/HDU5838-Mountain/</id>
    <published>2016-08-16T10:03:52.000Z</published>
    <updated>2018-07-01T09:54:16.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2016 CCPC网络赛  </p>
<p>　　题意：给定n*m的方格及所有的局部最小值位置，放入数1－n*m，求可能的方案。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5838" target="_blank" rel="external"> - 原题链接</a><br><a id="more"></a>  </p>
<p>　　赛时写了一发BFS，从小到大填数，填满局部最小值后乘上剩余方格数的阶乘，问题在于无法保证剩余方格数为非局部最小值。赛后才知道这是我CQOI2012原题，然而并没有做过＝ ＝<br>　　考虑这道题的规模可以状态压缩，总共25个数，最多9个局部最小值，用f[i][j]表示放入前i个数，所有局部最小值的状态为j时的总方案数。填数时预处理cnt[j]，计算出j状态下包括局部最小值在内的所有可放的格子数，状态转移可以表示为：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f[i][j]=f[i<span class="number">-1</span>][j]*(cnt[j]-(i<span class="number">-1</span>))+sig(f[i<span class="number">-1</span>][j^(<span class="number">1</span>&lt;&lt;k)])(j&amp;(<span class="number">1</span>&lt;&lt;k)==<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>　　要确保非局部最小值则需要枚举原状态下可能的局部最小值，容斥即可。因为自己写容斥比较少，整个程序学习的<a href="http://blog.csdn.net/popoqqq/article/details/48028773" target="_blank" rel="external">这篇博客</a>，好像对容斥更理解了一点&gt;&lt;<br>　　然而so sad，写了两天的程序，<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2669" target="_blank" rel="external">CQOI原题</a>都AC了，却一直通不过杭电的数据T T<br>　　人生总是艰难，这游戏不想玩了，bug留到以后de吧…  </p>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) (make_pair(a, b))</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5</span>+<span class="number">10</span>, maxm=(<span class="number">1</span>&lt;&lt;<span class="number">10</span>)+<span class="number">10</span>, mod=<span class="number">772002</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lint;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans, T, n, m, dd[<span class="number">9</span>][<span class="number">2</span>]=&#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">char</span> mp[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) <span class="keyword">if</span>(mp[i][j]==<span class="string">'X'</span>)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">8</span>; k++)</div><div class="line">				<span class="keyword">if</span>(mp[i+dd[k][<span class="number">0</span>]][j+dd[k][<span class="number">1</span>]]==<span class="string">'X'</span>)	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; vct;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) <span class="keyword">if</span>(mp[i][j]==<span class="string">'X'</span>)</div><div class="line">			vct.push_back(mp(i, j));</div><div class="line"></div><div class="line">	<span class="keyword">int</span> len=vct.size(), lim=(<span class="number">1</span>&lt;&lt;vct.size()), tmp=n*m;</div><div class="line">	<span class="keyword">int</span> cnt[maxm]=&#123;<span class="number">0</span>&#125;, f[maxn*maxn][maxm]=&#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> st=<span class="number">0</span>; st&lt;lim; st++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">bool</span> u[maxn][maxn]=&#123;<span class="literal">false</span>&#125;;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</div><div class="line">			<span class="keyword">if</span>(!(st&amp;(<span class="number">1</span>&lt;&lt;i))) u[vct[i].first][vct[i].second]=<span class="literal">true</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">bool</span> f=<span class="literal">true</span>;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">9</span>&amp;&amp;f; k++) f&amp;=!u[i+dd[k][<span class="number">0</span>]][j+dd[k][<span class="number">1</span>]];</div><div class="line">				f&amp;&amp;(++cnt[st]);</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=tmp; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> st=<span class="number">0</span>; st&lt;lim; st++) </div><div class="line">		&#123;</div><div class="line">			f[i][st]=(f[i][st]+(lint)f[i<span class="number">-1</span>][st]*max(cnt[st]-i+<span class="number">1</span>, <span class="number">0</span>)%mod)%mod;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len; j++) <span class="keyword">if</span>(st&amp;(<span class="number">1</span>&lt;&lt;j))</div><div class="line">				f[i][st]=(f[i][st]+f[i<span class="number">-1</span>][st^(<span class="number">1</span>&lt;&lt;j)])%mod;</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">return</span> f[tmp][lim<span class="number">-1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> cnt)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(x==n+<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		ans=(ans+DP()*(cnt&amp;<span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>)+mod)%mod;</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> tx=(y==m ? x+<span class="number">1</span> : x), ty=(y==m ? <span class="number">1</span> : y+<span class="number">1</span>);</div><div class="line">	Dfs(tx, ty, cnt);</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++) <span class="keyword">if</span>(mp[x+dd[i][<span class="number">0</span>]][y+dd[i][<span class="number">1</span>]]==<span class="string">'X'</span>)	<span class="keyword">return</span> ;</div><div class="line"></div><div class="line">	mp[x][y]=<span class="string">'X'</span>;</div><div class="line">	Dfs(tx, ty, cnt+<span class="number">1</span>);</div><div class="line">	mp[x][y]=<span class="string">'.'</span>;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, mp[i]+<span class="number">1</span>);</div><div class="line">		<span class="keyword">if</span>(!Judge())	<span class="built_in">printf</span>(<span class="string">"Case #%d: 0\n"</span>, ++T);</div><div class="line">		<span class="keyword">else</span>	ans=<span class="number">0</span>, Dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, ++T, ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2016 CCPC网络赛  &lt;/p&gt;
&lt;p&gt;　　题意：给定n*m的方格及所有的局部最小值位置，放入数1－n*m，求可能的方案。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5838&quot;&gt; - 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="HDU" scheme="http://thea-r.github.io/tags/HDU/"/>
    
      <category term="2016CCPC" scheme="http://thea-r.github.io/tags/2016CCPC/"/>
    
      <category term="状压DP" scheme="http://thea-r.github.io/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
      <category term="容斥" scheme="http://thea-r.github.io/tags/%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>HDU5727 Necklace</title>
    <link href="http://thea-r.github.io/2016/08/15/HDU5727-Necklace/"/>
    <id>http://thea-r.github.io/2016/08/15/HDU5727-Necklace/</id>
    <published>2016-08-15T07:40:27.000Z</published>
    <updated>2018-07-01T09:54:07.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2016 Multi-University Training Contest 1  </p>
<p>　　题意：给定若干阴阳珠子交错排列成环，有些阳珠与特定的阴珠相邻时会褪色，求最少的褪色数。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5727" target="_blank" rel="external"> - 原题链接</a><br><a id="more"></a>  </p>
<p>　　最开始的想法是二分图跑最佳匹配，想了好久确实没找到正确的转移…<br>　　官方题解是搜索＋估价剪枝，后来参考的是网上很多博客上的做法：固定阴珠，判断阳珠插入每一个位置的情况，若不褪色则连边，min（n-最大匹配）即最终答案。  </p>
<ul>
<li>成环时可以固定一个位置，剩下的进行全排列，总方案为（n-1）! </li>
<li>next_permutation（）很实用，学习链接戳<a href="http://www.cnblogs.com/kuangbin/archive/2012/03/30/2424482.html" target="_blank" rel="external">这儿</a>  </li>
</ul>
<p><br></p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">9</span>+<span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, a[maxn], dis, from[maxn];</div><div class="line"><span class="keyword">bool</span> br[maxn][maxn], st[maxn][maxn], vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(br, <span class="literal">false</span>, <span class="keyword">sizeof</span> br);</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u)</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(vis[i] || !st[u][i])	<span class="keyword">continue</span>;</div><div class="line">		vis[i]=<span class="literal">true</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(!from[i] || Dfs(from[i]))</div><div class="line">		&#123;</div><div class="line">			from[i]=u;</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!n)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		Init();</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, u, v; i&lt;=m; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">			br[u][v]=<span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)	a[i]=i;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> ans=n;</div><div class="line">		<span class="keyword">do</span></div><div class="line">		&#123;</div><div class="line">			<span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(!br[i][a[<span class="number">1</span>]] &amp;&amp; !br[i][a[n]]) st[n][i]=<span class="literal">true</span>;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++)</div><div class="line">					<span class="keyword">if</span>(!br[i][a[j]]&amp;&amp; !br[i][a[j+<span class="number">1</span>]]) st[j][i]=<span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">			<span class="built_in">memset</span>(from, <span class="number">0</span>, <span class="keyword">sizeof</span> from);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">				tmp+=Dfs(i);</div><div class="line">			&#125;</div><div class="line">			ans=min(ans, n-tmp);</div><div class="line">		&#125;<span class="keyword">while</span>(ans &amp;&amp; next_permutation(a+<span class="number">1</span>, a+<span class="number">1</span>+n<span class="number">-1</span>));</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2016 Multi-University Training Contest 1  &lt;/p&gt;
&lt;p&gt;　　题意：给定若干阴阳珠子交错排列成环，有些阳珠与特定的阴珠相邻时会褪色，求最少的褪色数。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5727&quot;&gt; - 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="HDU" scheme="http://thea-r.github.io/tags/HDU/"/>
    
      <category term="2016多校" scheme="http://thea-r.github.io/tags/2016%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="搜索" scheme="http://thea-r.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>HDU5828 Rikka with Sequence</title>
    <link href="http://thea-r.github.io/2016/08/13/HDU5828-Rikka-with-Sequence/"/>
    <id>http://thea-r.github.io/2016/08/13/HDU5828-Rikka-with-Sequence/</id>
    <published>2016-08-13T14:46:36.000Z</published>
    <updated>2018-07-01T09:54:03.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2016 Multi-University Training Contest 8  </p>
<p>　　题意：n元素序列，给定m种操作——区间加法，区间开方，区间求和。对于每个求和操作，输出结果。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5828" target="_blank" rel="external"> - 原题链接</a><br><a id="more"></a>  </p>
<p>　　很显然的线段树，然而直接思路也很显然会T。<br>　　赛时一直在纠结线段树应该维护什么东西，若维护操作序列，那只能朴素求和；若维护区间和，那sqrt要落实到所有叶子结点，代价太大。  </p>
<p>　　后来学习了官方题解和网上的博客，其实主要性质是，开方操作使元素减小非常快，不断开方后区间内元素最终会趋近相同，于是可以用到以下两种优化：</p>
<ul>
<li>若区间元素相同，转化为区间加法，tmp+=(sqrt(val)-val)</li>
<li>若区间元素极差为1且开方后极差仍为1，转化为区间加法，tmp+=(sqrt(min)-min)</li>
</ul>
<p>　　大概是很多细节没处理好，套上读入优化也只能到2839MS，过得很勉强＝ ＝  </p>
<p>　　敲完这题想到了多校1的那道GCD，当时我用极端数据a[i]=2^i推翻了自己的算法，却没有注意到在a[i]的限制范围内不可能出现持续的极端数据。两道题其实是用开方和对数将题面的大范围缩小到了可操作的小范围内，以后遇到类似问题要有这样的意识。<br>　　（谁能告诉我这篇代码为什么不能高亮😭）  </p>
<p><br></p>
<hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line">#include&lt;iostream&gt;</div><div class="line">#include&lt;cstring&gt;</div><div class="line">#include&lt;cstdlib&gt;</div><div class="line">#include&lt;cstdio&gt;</div><div class="line">#include&lt;cmath&gt;</div><div class="line">#include&lt;algorithm&gt;</div><div class="line">#define kl (k&lt;&lt;1)</div><div class="line">#define kr ((k&lt;&lt;1)+1)</div><div class="line">#define mid ((l+r)&gt;&gt;1)</div><div class="line">using namespace std;</div><div class="line">typedef long long lint;</div><div class="line">const int maxn=1e5 + 10;</div><div class="line">  </div><div class="line">int T, n, m;</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	lint mn, mx, sum, tmp;</div><div class="line">	node(lint _mn=0, lint _mx=0, lint s=0, lint t=0) &#123; mn=_mn, mx=_mx, sum=s, tmp=t; &#125;</div><div class="line">&#125;tr[maxn&lt;&lt;2];</div><div class="line">  </div><div class="line">void Get_lint(lint &amp;num, char c=0)</div><div class="line">&#123;</div><div class="line">	for(c=getchar(); c&lt;'0'||c&gt;'9'; c=getchar());</div><div class="line">	for(num=c-48; c=getchar(), c&gt;='0'&amp;&amp;c&lt;='9'; num=num*10+c-48);</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">void Build(int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">	tr[k].mn=tr[k].mx=tr[k].sum=tr[k].tmp=0;</div><div class="line">	if(l==r)	return ;</div><div class="line">	Build(kl, l, mid);</div><div class="line">	Build(kr, mid+1, r);</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">void Push_down(int k, int l, int r)</div><div class="line">&#123;</div><div class="line">	tr[kl].mn+=tr[k].tmp, tr[kl].mx+=tr[k].tmp, tr[kl].sum+=(mid-l+1)*tr[k].tmp, tr[kl].tmp+=tr[k].tmp;</div><div class="line">	tr[kr].mn+=tr[k].tmp, tr[kr].mx+=tr[k].tmp, tr[kr].sum+=(r-mid)*tr[k].tmp, tr[kr].tmp+=tr[k].tmp;</div><div class="line">	tr[k].tmp=0;</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">void Push_up(int k, int l, int r)</div><div class="line">&#123;</div><div class="line">	tr[k].mn=min(tr[kl].mn, tr[kr].mn);</div><div class="line">	tr[k].mx=max(tr[kl].mx, tr[kr].mx);</div><div class="line">	tr[k].sum=tr[kl].sum+tr[kr].sum;</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">void Insert(int ll, int rr, lint x, int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">	if(rr &lt;l||r&lt; ll)	return ;</div><div class="line">	if(ll&lt;=l&amp;&amp;r&lt;=rr)</div><div class="line">	&#123;</div><div class="line">		tr[k].mn+=x, tr[k].mx+=x, tr[k].sum+=(r-l+1)*x, tr[k].tmp+=x;</div><div class="line">		return ;</div><div class="line">	&#125;</div><div class="line">	if(tr[k].tmp)	Push_down(k, l, r);</div><div class="line">	Insert(ll, rr, x, kl, l, mid);</div><div class="line">	Insert(ll, rr, x, kr, mid+1, r);</div><div class="line">	Push_up(k, l, r);</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">void Modify(int ll, int rr, int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">	if(rr &lt;l||r&lt; ll)	return ;</div><div class="line">	if(ll&lt;=l&amp;&amp;r&lt;=rr)</div><div class="line">	&#123;</div><div class="line">		if(tr[k].mn==tr[k].mx)</div><div class="line">		&#123;</div><div class="line">			lint tmp=sqrt(tr[k].mn);</div><div class="line">			tr[k].tmp+=tmp-tr[k].mn, tr[k].sum=(r-l+1)*tmp, tr[k].mn=tr[k].mx=tmp;</div><div class="line">			return ;</div><div class="line">		&#125;</div><div class="line">		else if(tr[k].mn+1==tr[k].mx)</div><div class="line">		&#123;</div><div class="line">			lint tp1=sqrt(tr[k].mn), tp2=sqrt(tr[k].mx);</div><div class="line">			if(tp1+1==tp2)</div><div class="line">			&#123;</div><div class="line">				tr[k].tmp+=tp1-tr[k].mn, tr[k].sum+=(r-l+1)*(tp1-tr[k].mn), tr[k].mn=tp1, tr[k].mx=tp2;</div><div class="line">				return ;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	if(tr[k].tmp)	Push_down(k, l, r);</div><div class="line">	Modify(ll, rr, kl, l, mid);</div><div class="line">	Modify(ll, rr, kr, mid+1, r);</div><div class="line">	Push_up(k, l, r);</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">lint Query(int ll, int rr, int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">	if(rr &lt;l||r&lt; ll)	return 0;</div><div class="line">	if(ll&lt;=l&amp;&amp;r&lt;=rr)	return tr[k].sum;</div><div class="line">	if(tr[k].tmp)	Push_down(k, l, r);</div><div class="line">	return Query(ll, rr, kl, l, mid)+Query(ll, rr, kr, mid+1, r);</div><div class="line">&#125;</div><div class="line">  </div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	scanf("%d", &amp;T);</div><div class="line">	while(T--)</div><div class="line">	&#123;</div><div class="line">		scanf("%d%d", &amp;n, &amp;m);</div><div class="line">		Build();</div><div class="line">		  </div><div class="line">		lint d, l, r, x;</div><div class="line">		for(int i=1; i&lt;=n; i++)</div><div class="line">		&#123;</div><div class="line">			Get_lint(x);</div><div class="line">			Insert(i, i, x);</div><div class="line">		&#125;</div><div class="line">		  </div><div class="line">		for(int i=1; i&lt;=m; i++)</div><div class="line">		&#123;</div><div class="line">			Get_lint(d), Get_lint(l), Get_lint(r);</div><div class="line">			if(d==1)</div><div class="line">			&#123;</div><div class="line">				Get_lint(x);</div><div class="line">				Insert(l, r, x);</div><div class="line">			&#125;</div><div class="line">			else if(d==2)	Modify(l, r);</div><div class="line">			else printf("%lld\n", Query(l, r));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2016 Multi-University Training Contest 8  &lt;/p&gt;
&lt;p&gt;　　题意：n元素序列，给定m种操作——区间加法，区间开方，区间求和。对于每个求和操作，输出结果。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5828&quot;&gt; - 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ACM题解" scheme="http://thea-r.github.io/categories/ACM%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="线段树" scheme="http://thea-r.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="HDU" scheme="http://thea-r.github.io/tags/HDU/"/>
    
      <category term="2016多校" scheme="http://thea-r.github.io/tags/2016%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
</feed>
