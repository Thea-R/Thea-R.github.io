<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>然而，然而</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thea-r.github.io/"/>
  <updated>2016-08-19T06:33:17.000Z</updated>
  <id>http://thea-r.github.io/</id>
  
  <author>
    <name>Thea-R</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HDU5860 Death Sequence</title>
    <link href="http://thea-r.github.io/2016/08/19/HDU5860-Death-Sequence/"/>
    <id>http://thea-r.github.io/2016/08/19/HDU5860-Death-Sequence/</id>
    <published>2016-08-19T06:17:11.000Z</published>
    <updated>2016-08-19T06:33:17.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2016 Multi-University Training Contest 10  </p>
<p>　　题意：n个人报数，每一轮报数(i*k+1)的人淘汰，到队列末尾后剩余人员进行新一轮报数，直至全员淘汰。给定m次查询，求第j个出队者的序号。<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5860" target="_blank" rel="external">- 原题链接</a><br><a id="more"></a>  </p>
<p>　　类约瑟夫问题，但是不成环。<br>　　本题种当前总人数为n，编号1-n，则本轮i%k==1的人淘汰，淘汰总人数为(n+k-1)/k。剩下的人从1开始重编号，重复上一轮的过程。设i为第f[i]轮第g[i]个出局，则有以下递推关系式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f[i]=(i%k==<span class="number">1</span>) ? <span class="number">1</span> : f[i-(i+k<span class="number">-1</span>)/k]+<span class="number">1</span>;</div><div class="line">g[i]=(i%k==<span class="number">1</span>) ? (i+k<span class="number">-1</span>)/k : g[i-(i+k<span class="number">-1</span>)/k];</div></pre></td></tr></table></figure></p>
<p>　　预处理出前j轮淘汰的总人数cnt[j]，则i的出队序号为cnt[f[i]-1]+g[i]。</p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3</span>*<span class="number">1e6</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, n, m, k;</div><div class="line"><span class="keyword">int</span> tot, cnt[maxn], f[maxn], g[maxn], ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;m);</div><div class="line"></div><div class="line">        tot=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> tmp=n; tmp; tmp-=cnt[tot]-cnt[tot<span class="number">-1</span>])</div><div class="line">        &#123;</div><div class="line">            cnt[++tot]=(tmp+k<span class="number">-1</span>)/k;</div><div class="line">            cnt[tot]+=cnt[tot<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">        &#123;</div><div class="line">            f[i]=(i%k==<span class="number">1</span>) ? <span class="number">1</span> : f[i-(i+k<span class="number">-1</span>)/k]+<span class="number">1</span>;</div><div class="line">            g[i]=(i%k==<span class="number">1</span>) ? (i+k<span class="number">-1</span>)/k : g[i-(i+k<span class="number">-1</span>)/k];</div><div class="line">            ans[cnt[f[i]<span class="number">-1</span>]+g[i]]=i;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, x; i&lt;=m; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[x]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2016 Multi-University Training Contest 10  &lt;/p&gt;
&lt;p&gt;　　题意：n个人报数，每一轮报数(i*k+1)的人淘汰，到队列末尾后剩余人员进行新一轮报数，直至全员淘汰。给定m次查询，求第j个出队者的序号。&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5860&quot;&gt;- 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="2016多校" scheme="http://thea-r.github.io/tags/2016%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="递推" scheme="http://thea-r.github.io/tags/%E9%80%92%E6%8E%A8/"/>
    
  </entry>
  
  <entry>
    <title>HDU5838 Mountain</title>
    <link href="http://thea-r.github.io/2016/08/16/HDU5838-Mountain/"/>
    <id>http://thea-r.github.io/2016/08/16/HDU5838-Mountain/</id>
    <published>2016-08-16T10:03:52.000Z</published>
    <updated>2016-08-16T11:26:58.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2016CCPC网络赛  </p>
<p>　　题意：给定n*m的方格及所有的局部最小值位置，放入数1－n*m，求可能的方案。  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5838" target="_blank" rel="external">- 原题链接</a><br><a id="more"></a>  </p>
<p>　　赛时写了一发BFS，从小到大填数，填满局部最小值后乘上剩余方格数的阶乘，问题在于无法保证剩余方格数为非局部最小值。赛后才知道这是我CQOI2012原题，然而并没有做过＝ ＝<br>　　考虑这道题的规模可以状态压缩，总共25个数，最多9个局部最小值，用f[i][j]表示放入前i个数，所有局部最小值的状态为j时的总方案数。填数时预处理cnt[j]，计算出j状态下包括局部最小值在内的所有可放的格子数，状态转移可以表示为：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f[i][j]=f[i<span class="number">-1</span>][j]*(cnt[j]-(i<span class="number">-1</span>))+sig(f[i<span class="number">-1</span>][j^(<span class="number">1</span>&lt;&lt;k)])(j&amp;(<span class="number">1</span>&lt;&lt;k)==<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>　　要确保非局部最小值则需要枚举原状态下可能的局部最小值，容斥即可。因为自己写容斥比较少，整个程序学习的<a href="http://blog.csdn.net/popoqqq/article/details/48028773" target="_blank" rel="external">这篇博客</a>，好像对容斥更理解了一点&gt;&lt;<br>　　然而so sad，写了两天的程序，<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2669" target="_blank" rel="external">CQOI原题</a>都AC了，却一直通不过杭电的数据T T<br>　　人生总是艰难，这游戏不想玩了，bug留到以后de吧…  </p>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) (make_pair(a, b))</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5</span>+<span class="number">10</span>, maxm=(<span class="number">1</span>&lt;&lt;<span class="number">10</span>)+<span class="number">10</span>, mod=<span class="number">772002</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lint;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans, T, n, m, dd[<span class="number">9</span>][<span class="number">2</span>]=&#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">char</span> mp[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) <span class="keyword">if</span>(mp[i][j]==<span class="string">'X'</span>)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">8</span>; k++)</div><div class="line">				<span class="keyword">if</span>(mp[i+dd[k][<span class="number">0</span>]][j+dd[k][<span class="number">1</span>]]==<span class="string">'X'</span>)	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; vct;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) <span class="keyword">if</span>(mp[i][j]==<span class="string">'X'</span>)</div><div class="line">			vct.push_back(mp(i, j));</div><div class="line"></div><div class="line">	<span class="keyword">int</span> len=vct.size(), lim=(<span class="number">1</span>&lt;&lt;vct.size()), tmp=n*m;</div><div class="line">	<span class="keyword">int</span> cnt[maxm]=&#123;<span class="number">0</span>&#125;, f[maxn*maxn][maxm]=&#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> st=<span class="number">0</span>; st&lt;lim; st++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">bool</span> u[maxn][maxn]=&#123;<span class="literal">false</span>&#125;;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</div><div class="line">			<span class="keyword">if</span>(!(st&amp;(<span class="number">1</span>&lt;&lt;i))) u[vct[i].first][vct[i].second]=<span class="literal">true</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">bool</span> f=<span class="literal">true</span>;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">9</span>&amp;&amp;f; k++) f&amp;=!u[i+dd[k][<span class="number">0</span>]][j+dd[k][<span class="number">1</span>]];</div><div class="line">				f&amp;&amp;(++cnt[st]);</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=tmp; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> st=<span class="number">0</span>; st&lt;lim; st++) </div><div class="line">		&#123;</div><div class="line">			f[i][st]=(f[i][st]+(lint)f[i<span class="number">-1</span>][st]*max(cnt[st]-i+<span class="number">1</span>, <span class="number">0</span>)%mod)%mod;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len; j++) <span class="keyword">if</span>(st&amp;(<span class="number">1</span>&lt;&lt;j))</div><div class="line">				f[i][st]=(f[i][st]+f[i<span class="number">-1</span>][st^(<span class="number">1</span>&lt;&lt;j)])%mod;</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">return</span> f[tmp][lim<span class="number">-1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> cnt)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(x==n+<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		ans=(ans+DP()*(cnt&amp;<span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>)+mod)%mod;</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> tx=(y==m ? x+<span class="number">1</span> : x), ty=(y==m ? <span class="number">1</span> : y+<span class="number">1</span>);</div><div class="line">	Dfs(tx, ty, cnt);</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++) <span class="keyword">if</span>(mp[x+dd[i][<span class="number">0</span>]][y+dd[i][<span class="number">1</span>]]==<span class="string">'X'</span>)	<span class="keyword">return</span> ;</div><div class="line"></div><div class="line">	mp[x][y]=<span class="string">'X'</span>;</div><div class="line">	Dfs(tx, ty, cnt+<span class="number">1</span>);</div><div class="line">	mp[x][y]=<span class="string">'.'</span>;</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, mp[i]+<span class="number">1</span>);</div><div class="line">		<span class="keyword">if</span>(!Judge())	<span class="built_in">printf</span>(<span class="string">"Case #%d: 0\n"</span>, ++T);</div><div class="line">		<span class="keyword">else</span>	ans=<span class="number">0</span>, Dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, ++T, ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2016CCPC网络赛  &lt;/p&gt;
&lt;p&gt;　　题意：给定n*m的方格及所有的局部最小值位置，放入数1－n*m，求可能的方案。  &lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5838&quot;&gt;- 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="2016多校" scheme="http://thea-r.github.io/tags/2016%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="DP" scheme="http://thea-r.github.io/tags/DP/"/>
    
      <category term="状压" scheme="http://thea-r.github.io/tags/%E7%8A%B6%E5%8E%8B/"/>
    
      <category term="容斥" scheme="http://thea-r.github.io/tags/%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>HDU5727 Necklace</title>
    <link href="http://thea-r.github.io/2016/08/15/HDU5727-Necklace/"/>
    <id>http://thea-r.github.io/2016/08/15/HDU5727-Necklace/</id>
    <published>2016-08-15T07:40:27.000Z</published>
    <updated>2016-08-15T08:03:25.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2016 Multi-University Training Contest 1  </p>
<p>　　题意：给定若干阴阳珠子交错排列成环，有些阳珠与特定的阴珠相邻时会褪色，求最少的褪色数。 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5727" target="_blank" rel="external">- 原题链接</a><br><a id="more"></a>  </p>
<p>　　最开始的想法是二分图跑最佳匹配，想了好久确实没找到正确的转移…<br>　　官方题解是搜索＋估价剪枝，后来参考的是网上很多博客上的做法：固定阴珠，判断阳珠插入每一个位置的情况，若不褪色则连边，min（n-最大匹配）即最终答案。  </p>
<ul>
<li>成环时可以固定一个位置，剩下的进行全排列，总方案为（n-1）! </li>
<li>next_permutation（）很实用，学习链接戳<a href="http://www.cnblogs.com/kuangbin/archive/2012/03/30/2424482.html" target="_blank" rel="external">这儿</a>  </li>
</ul>
<hr>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">9</span>+<span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, a[maxn], dis, from[maxn];</div><div class="line"><span class="keyword">bool</span> br[maxn][maxn], st[maxn][maxn], vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">memset</span>(br, <span class="literal">false</span>, <span class="keyword">sizeof</span> br);</div><div class="line">	<span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(vis[i] || !st[u][i])	<span class="keyword">continue</span>;</div><div class="line">		vis[i]=<span class="literal">true</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(!from[i] || Dfs(from[i]))</div><div class="line">		&#123;</div><div class="line">			from[i]=u;</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)!=EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!n)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		Init();</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, u, v; i&lt;=m; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</div><div class="line">			br[u][v]=<span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)	a[i]=i;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> ans=n;</div><div class="line">		<span class="keyword">do</span></div><div class="line">		&#123;</div><div class="line">			<span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(!br[i][a[<span class="number">1</span>]] &amp;&amp; !br[i][a[n]]) st[n][i]=<span class="literal">true</span>;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++)</div><div class="line">					<span class="keyword">if</span>(!br[i][a[j]]&amp;&amp; !br[i][a[j+<span class="number">1</span>]]) st[j][i]=<span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">			<span class="built_in">memset</span>(from, <span class="number">0</span>, <span class="keyword">sizeof</span> from);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</div><div class="line">			&#123;</div><div class="line">				<span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">				tmp+=Dfs(i);</div><div class="line">			&#125;</div><div class="line">			ans=min(ans, n-tmp);</div><div class="line">		&#125;<span class="keyword">while</span>(ans &amp;&amp; next_permutation(a+<span class="number">1</span>, a+<span class="number">1</span>+n<span class="number">-1</span>));</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2016 Multi-University Training Contest 1  &lt;/p&gt;
&lt;p&gt;　　题意：给定若干阴阳珠子交错排列成环，有些阳珠与特定的阴珠相邻时会褪色，求最少的褪色数。 &lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5727&quot;&gt;- 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="2016多校" scheme="http://thea-r.github.io/tags/2016%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="搜索" scheme="http://thea-r.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>HDU5828 Rikka with Sequence</title>
    <link href="http://thea-r.github.io/2016/08/13/HDU5828-Rikka-with-Sequence/"/>
    <id>http://thea-r.github.io/2016/08/13/HDU5828-Rikka-with-Sequence/</id>
    <published>2016-08-13T14:46:36.000Z</published>
    <updated>2016-08-16T12:15:21.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　2016 Multi-University Training Contest 8  </p>
<p>　　题意：n元素序列，给定m种操作——区间加法，区间开方，区间求和。对于每个求和操作，输出结果。  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5828" target="_blank" rel="external">- 原题链接</a><br><a id="more"></a>  </p>
<p>　　很显然的线段树，然而直接思路也很显然会T。<br>　　赛时一直在纠结线段树应该维护什么东西，若维护操作序列，那只能朴素求和；若维护区间和，那sqrt要落实到所有叶子结点，代价太大。  </p>
<p>　　后来学习了官方题解和网上的博客，其实主要性质是，开方操作使元素减小非常快，不断开方后区间内元素最终会趋近相同，于是可以用到以下两种优化：</p>
<ul>
<li>若区间元素相同，转化为区间加法，tmp+=(sqrt(val)-val)</li>
<li>若区间元素极差为1且开方后极差仍为1，转化为区间加法，tmp+=(sqrt(min)-min)</li>
</ul>
<p>　　大概是很多细节没处理好，套上读入优化也只能到2839MS，过得很勉强＝ ＝  </p>
<p>　　敲完这题想到了多校1的那道GCD，当时我用极端数据a[i]=2^i推翻了自己的算法，却没有注意到在a[i]的限制范围内不可能出现持续的极端数据。两道题其实是用开方和对数将题面的大范围缩小到了可操作的小范围内，以后遇到类似问题要有这样的意识。<br>　　（谁能告诉我这篇代码为什么不能高亮😭）</p>
<hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line">#include&lt;iostream&gt;</div><div class="line">#include&lt;cstring&gt;</div><div class="line">#include&lt;cstdlib&gt;</div><div class="line">#include&lt;cstdio&gt;</div><div class="line">#include&lt;cmath&gt;</div><div class="line">#include&lt;algorithm&gt;</div><div class="line">#define kl (k&lt;&lt;1)</div><div class="line">#define kr ((k&lt;&lt;1)+1)</div><div class="line">#define mid ((l+r)&gt;&gt;1)</div><div class="line">using namespace std;</div><div class="line">typedef long long lint;</div><div class="line">const int maxn=1e5 + 10;</div><div class="line">  </div><div class="line">int T, n, m;</div><div class="line">struct node</div><div class="line">&#123;</div><div class="line">	lint mn, mx, sum, tmp;</div><div class="line">	node(lint _mn=0, lint _mx=0, lint s=0, lint t=0) &#123; mn=_mn, mx=_mx, sum=s, tmp=t; &#125;</div><div class="line">&#125;tr[maxn&lt;&lt;2];</div><div class="line">  </div><div class="line">void Get_lint(lint &amp;num, char c=0)</div><div class="line">&#123;</div><div class="line">	for(c=getchar(); c&lt;'0'||c&gt;'9'; c=getchar());</div><div class="line">	for(num=c-48; c=getchar(), c&gt;='0'&amp;&amp;c&lt;='9'; num=num*10+c-48);</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">void Build(int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">	tr[k].mn=tr[k].mx=tr[k].sum=tr[k].tmp=0;</div><div class="line">	if(l==r)	return ;</div><div class="line">	Build(kl, l, mid);</div><div class="line">	Build(kr, mid+1, r);</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">void Push_down(int k, int l, int r)</div><div class="line">&#123;</div><div class="line">	tr[kl].mn+=tr[k].tmp, tr[kl].mx+=tr[k].tmp, tr[kl].sum+=(mid-l+1)*tr[k].tmp, tr[kl].tmp+=tr[k].tmp;</div><div class="line">	tr[kr].mn+=tr[k].tmp, tr[kr].mx+=tr[k].tmp, tr[kr].sum+=(r-mid)*tr[k].tmp, tr[kr].tmp+=tr[k].tmp;</div><div class="line">	tr[k].tmp=0;</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">void Push_up(int k, int l, int r)</div><div class="line">&#123;</div><div class="line">	tr[k].mn=min(tr[kl].mn, tr[kr].mn);</div><div class="line">	tr[k].mx=max(tr[kl].mx, tr[kr].mx);</div><div class="line">	tr[k].sum=tr[kl].sum+tr[kr].sum;</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">void Insert(int ll, int rr, lint x, int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">	if(rr &lt;l||r&lt; ll)	return ;</div><div class="line">	if(ll&lt;=l&amp;&amp;r&lt;=rr)</div><div class="line">	&#123;</div><div class="line">		tr[k].mn+=x, tr[k].mx+=x, tr[k].sum+=(r-l+1)*x, tr[k].tmp+=x;</div><div class="line">		return ;</div><div class="line">	&#125;</div><div class="line">	if(tr[k].tmp)	Push_down(k, l, r);</div><div class="line">	Insert(ll, rr, x, kl, l, mid);</div><div class="line">	Insert(ll, rr, x, kr, mid+1, r);</div><div class="line">	Push_up(k, l, r);</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">void Modify(int ll, int rr, int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">	if(rr &lt;l||r&lt; ll)	return ;</div><div class="line">	if(ll&lt;=l&amp;&amp;r&lt;=rr)</div><div class="line">	&#123;</div><div class="line">		if(tr[k].mn==tr[k].mx)</div><div class="line">		&#123;</div><div class="line">			lint tmp=sqrt(tr[k].mn);</div><div class="line">			tr[k].tmp+=tmp-tr[k].mn, tr[k].sum=(r-l+1)*tmp, tr[k].mn=tr[k].mx=tmp;</div><div class="line">			return ;</div><div class="line">		&#125;</div><div class="line">		else if(tr[k].mn+1==tr[k].mx)</div><div class="line">		&#123;</div><div class="line">			lint tp1=sqrt(tr[k].mn), tp2=sqrt(tr[k].mx);</div><div class="line">			if(tp1+1==tp2)</div><div class="line">			&#123;</div><div class="line">				tr[k].tmp+=tp1-tr[k].mn, tr[k].sum+=(r-l+1)*(tp1-tr[k].mn), tr[k].mn=tp1, tr[k].mx=tp2;</div><div class="line">				return ;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	if(tr[k].tmp)	Push_down(k, l, r);</div><div class="line">	Modify(ll, rr, kl, l, mid);</div><div class="line">	Modify(ll, rr, kr, mid+1, r);</div><div class="line">	Push_up(k, l, r);</div><div class="line">	return ;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">lint Query(int ll, int rr, int k=1, int l=1, int r=n)</div><div class="line">&#123;</div><div class="line">	if(rr &lt;l||r&lt; ll)	return 0;</div><div class="line">	if(ll&lt;=l&amp;&amp;r&lt;=rr)	return tr[k].sum;</div><div class="line">	if(tr[k].tmp)	Push_down(k, l, r);</div><div class="line">	return Query(ll, rr, kl, l, mid)+Query(ll, rr, kr, mid+1, r);</div><div class="line">&#125;</div><div class="line">  </div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	scanf("%d", &amp;T);</div><div class="line">	while(T--)</div><div class="line">	&#123;</div><div class="line">		scanf("%d%d", &amp;n, &amp;m);</div><div class="line">		Build();</div><div class="line">		  </div><div class="line">		lint d, l, r, x;</div><div class="line">		for(int i=1; i&lt;=n; i++)</div><div class="line">		&#123;</div><div class="line">			Get_lint(x);</div><div class="line">			Insert(i, i, x);</div><div class="line">		&#125;</div><div class="line">		  </div><div class="line">		for(int i=1; i&lt;=m; i++)</div><div class="line">		&#123;</div><div class="line">			Get_lint(d), Get_lint(l), Get_lint(r);</div><div class="line">			if(d==1)</div><div class="line">			&#123;</div><div class="line">				Get_lint(x);</div><div class="line">				Insert(l, r, x);</div><div class="line">			&#125;</div><div class="line">			else if(d==2)	Modify(l, r);</div><div class="line">			else printf("%lld\n", Query(l, r));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2016 Multi-University Training Contest 8  &lt;/p&gt;
&lt;p&gt;　　题意：n元素序列，给定m种操作——区间加法，区间开方，区间求和。对于每个求和操作，输出结果。  &lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5828&quot;&gt;- 原题链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="2016多校" scheme="http://thea-r.github.io/tags/2016%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="线段树" scheme="http://thea-r.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://thea-r.github.io/2016/08/13/Hello-World/"/>
    <id>http://thea-r.github.io/2016/08/13/Hello-World/</id>
    <published>2016-08-13T13:23:49.000Z</published>
    <updated>2016-08-14T01:59:18.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>　　第一篇文，你以为会有摘要？<br><a id="more"></a>  </p>
<p>　　讲真，粉色不是我的style… 而且site title的字体是不是太小了一点😕<br>　　奈何其他主题大大小小缺陷更多🙄️<br>　　强迫症患者早晚会自己捣鼓一个满意的主题出来的，奇怪的flag🙊<br>　　所以拖延症患者的早晚到底是多晚呢🌚<br>　　whatever，折腾这么久终于步入正轨了，Hello World~<br><br></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">" Hello World "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">" Coding Life "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　第一篇文，你以为会有摘要？&lt;br&gt;
    
    </summary>
    
    
      <category term="fragment" scheme="http://thea-r.github.io/tags/fragment/"/>
    
  </entry>
  
</feed>
